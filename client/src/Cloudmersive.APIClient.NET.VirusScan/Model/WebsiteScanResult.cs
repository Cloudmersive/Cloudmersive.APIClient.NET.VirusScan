/*
 * virusapi
 *
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloudmersive.APIClient.NET.VirusScan.Client.OpenAPIDateConverter;

namespace Cloudmersive.APIClient.NET.VirusScan.Model
{
    /// <summary>
    /// Result of running a website scan
    /// </summary>
    [DataContract(Name = "WebsiteScanResult")]
    public partial class WebsiteScanResult : IValidatableObject
    {
        /// <summary>
        /// Type of threat returned; can be None, Malware, ForcedDownload or Phishing
        /// </summary>
        /// <value>Type of threat returned; can be None, Malware, ForcedDownload or Phishing</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WebsiteThreatTypeEnum
        {
            /// <summary>
            /// Enum None for value: None
            /// </summary>
            [EnumMember(Value = "None")]
            None = 1,

            /// <summary>
            /// Enum Malware for value: Malware
            /// </summary>
            [EnumMember(Value = "Malware")]
            Malware = 2,

            /// <summary>
            /// Enum Phishing for value: Phishing
            /// </summary>
            [EnumMember(Value = "Phishing")]
            Phishing = 3,

            /// <summary>
            /// Enum ForcedDownload for value: ForcedDownload
            /// </summary>
            [EnumMember(Value = "ForcedDownload")]
            ForcedDownload = 4,

            /// <summary>
            /// Enum UnableToConnect for value: UnableToConnect
            /// </summary>
            [EnumMember(Value = "UnableToConnect")]
            UnableToConnect = 5
        }


        /// <summary>
        /// Type of threat returned; can be None, Malware, ForcedDownload or Phishing
        /// </summary>
        /// <value>Type of threat returned; can be None, Malware, ForcedDownload or Phishing</value>
        [DataMember(Name = "WebsiteThreatType", EmitDefaultValue = false)]
        public WebsiteThreatTypeEnum? WebsiteThreatType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WebsiteScanResult" /> class.
        /// </summary>
        /// <param name="cleanResult">True if the scan contained no threats, false otherwise.</param>
        /// <param name="websiteThreatType">Type of threat returned; can be None, Malware, ForcedDownload or Phishing.</param>
        /// <param name="foundViruses">Array of viruses found, if any.</param>
        /// <param name="websiteHttpResponseCode">The remote server URL HTTP reasponse code; useful for debugging issues with scanning; typically if the remote server returns a 200 or 300-series code this means a successful response, while a 400 or 500 series code would represent an error returned from the remote server for the provided URL..</param>
        public WebsiteScanResult(bool cleanResult = default(bool), WebsiteThreatTypeEnum? websiteThreatType = default(WebsiteThreatTypeEnum?), List<VirusFound> foundViruses = default(List<VirusFound>), int websiteHttpResponseCode = default(int))
        {
            this.CleanResult = cleanResult;
            this.WebsiteThreatType = websiteThreatType;
            this.FoundViruses = foundViruses;
            this.WebsiteHttpResponseCode = websiteHttpResponseCode;
        }

        /// <summary>
        /// True if the scan contained no threats, false otherwise
        /// </summary>
        /// <value>True if the scan contained no threats, false otherwise</value>
        [DataMember(Name = "CleanResult", EmitDefaultValue = true)]
        public bool CleanResult { get; set; }

        /// <summary>
        /// Array of viruses found, if any
        /// </summary>
        /// <value>Array of viruses found, if any</value>
        [DataMember(Name = "FoundViruses", EmitDefaultValue = false)]
        public List<VirusFound> FoundViruses { get; set; }

        /// <summary>
        /// The remote server URL HTTP reasponse code; useful for debugging issues with scanning; typically if the remote server returns a 200 or 300-series code this means a successful response, while a 400 or 500 series code would represent an error returned from the remote server for the provided URL.
        /// </summary>
        /// <value>The remote server URL HTTP reasponse code; useful for debugging issues with scanning; typically if the remote server returns a 200 or 300-series code this means a successful response, while a 400 or 500 series code would represent an error returned from the remote server for the provided URL.</value>
        [DataMember(Name = "WebsiteHttpResponseCode", EmitDefaultValue = false)]
        public int WebsiteHttpResponseCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebsiteScanResult {\n");
            sb.Append("  CleanResult: ").Append(CleanResult).Append("\n");
            sb.Append("  WebsiteThreatType: ").Append(WebsiteThreatType).Append("\n");
            sb.Append("  FoundViruses: ").Append(FoundViruses).Append("\n");
            sb.Append("  WebsiteHttpResponseCode: ").Append(WebsiteHttpResponseCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
