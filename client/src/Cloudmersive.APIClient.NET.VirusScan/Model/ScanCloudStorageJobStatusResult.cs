/*
 * virusapi
 *
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloudmersive.APIClient.NET.VirusScan.Client.OpenAPIDateConverter;

namespace Cloudmersive.APIClient.NET.VirusScan.Model
{
    /// <summary>
    /// Status of the scan cloud storage job
    /// </summary>
    [DataContract(Name = "ScanCloudStorageJobStatusResult")]
    public partial class ScanCloudStorageJobStatusResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScanCloudStorageJobStatusResult" /> class.
        /// </summary>
        /// <param name="successful">Tru eif the operation to check the status of the job was successful, false otherwise.</param>
        /// <param name="asyncJobStatus">Returns the job status of the Async Job, if applicable.  Possible states are STARTED and COMPLETED.</param>
        /// <param name="asyncJobID">Job ID of the async batch job.</param>
        /// <param name="result">result.</param>
        /// <param name="jobDuration">Duration of a completed job.</param>
        /// <param name="errorMessage">Error message (if any).</param>
        public ScanCloudStorageJobStatusResult(bool successful = default(bool), string asyncJobStatus = default(string), string asyncJobID = default(string), CloudStorageAdvancedVirusScanResult result = default(CloudStorageAdvancedVirusScanResult), string jobDuration = default(string), string errorMessage = default(string))
        {
            this.Successful = successful;
            this.AsyncJobStatus = asyncJobStatus;
            this.AsyncJobID = asyncJobID;
            this.Result = result;
            this.JobDuration = jobDuration;
            this.ErrorMessage = errorMessage;
        }

        /// <summary>
        /// Tru eif the operation to check the status of the job was successful, false otherwise
        /// </summary>
        /// <value>Tru eif the operation to check the status of the job was successful, false otherwise</value>
        [DataMember(Name = "Successful", EmitDefaultValue = true)]
        public bool Successful { get; set; }

        /// <summary>
        /// Returns the job status of the Async Job, if applicable.  Possible states are STARTED and COMPLETED
        /// </summary>
        /// <value>Returns the job status of the Async Job, if applicable.  Possible states are STARTED and COMPLETED</value>
        [DataMember(Name = "AsyncJobStatus", EmitDefaultValue = false)]
        public string AsyncJobStatus { get; set; }

        /// <summary>
        /// Job ID of the async batch job
        /// </summary>
        /// <value>Job ID of the async batch job</value>
        [DataMember(Name = "AsyncJobID", EmitDefaultValue = false)]
        public string AsyncJobID { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "Result", EmitDefaultValue = false)]
        public CloudStorageAdvancedVirusScanResult Result { get; set; }

        /// <summary>
        /// Duration of a completed job
        /// </summary>
        /// <value>Duration of a completed job</value>
        [DataMember(Name = "JobDuration", EmitDefaultValue = false)]
        public string JobDuration { get; set; }

        /// <summary>
        /// Error message (if any)
        /// </summary>
        /// <value>Error message (if any)</value>
        [DataMember(Name = "ErrorMessage", EmitDefaultValue = false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScanCloudStorageJobStatusResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  AsyncJobStatus: ").Append(AsyncJobStatus).Append("\n");
            sb.Append("  AsyncJobID: ").Append(AsyncJobID).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  JobDuration: ").Append(JobDuration).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
