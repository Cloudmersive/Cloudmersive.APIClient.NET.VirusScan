/*
 * virusapi
 *
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloudmersive.APIClient.NET.VirusScan.Client.OpenAPIDateConverter;

namespace Cloudmersive.APIClient.NET.VirusScan.Model
{
    /// <summary>
    /// Additional non-threat content verification information
    /// </summary>
    [DataContract(Name = "AdditionalAdvancedScanInformation")]
    public partial class AdditionalAdvancedScanInformation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalAdvancedScanInformation" /> class.
        /// </summary>
        /// <param name="containsJSON">True if the input file contains JSON data, false otherwise; this is not a threat signal.</param>
        /// <param name="containsXML">True if the input file contains XML data, false otherwise; this is not a threat signal.</param>
        /// <param name="containsImage">True if the input file contains an image.</param>
        /// <param name="hashSHA1">SHA1 hash of input file.</param>
        /// <param name="relevantSubfileName">Relevant subfile name in an archive format for identified threats, if any.</param>
        /// <param name="relevantSubfileHashSHA1">SHA1 hash of relevant subfile name in an archive format for identified threats, if any.</param>
        /// <param name="isAuthenticodeSigned">True if there is a valid Authenticode signature, False otherwise.</param>
        public AdditionalAdvancedScanInformation(bool containsJSON = default(bool), bool containsXML = default(bool), bool containsImage = default(bool), string hashSHA1 = default(string), string relevantSubfileName = default(string), string relevantSubfileHashSHA1 = default(string), bool isAuthenticodeSigned = default(bool))
        {
            this.ContainsJSON = containsJSON;
            this.ContainsXML = containsXML;
            this.ContainsImage = containsImage;
            this.HashSHA1 = hashSHA1;
            this.RelevantSubfileName = relevantSubfileName;
            this.RelevantSubfileHashSHA1 = relevantSubfileHashSHA1;
            this.IsAuthenticodeSigned = isAuthenticodeSigned;
        }

        /// <summary>
        /// True if the input file contains JSON data, false otherwise; this is not a threat signal
        /// </summary>
        /// <value>True if the input file contains JSON data, false otherwise; this is not a threat signal</value>
        [DataMember(Name = "ContainsJSON", EmitDefaultValue = true)]
        public bool ContainsJSON { get; set; }

        /// <summary>
        /// True if the input file contains XML data, false otherwise; this is not a threat signal
        /// </summary>
        /// <value>True if the input file contains XML data, false otherwise; this is not a threat signal</value>
        [DataMember(Name = "ContainsXML", EmitDefaultValue = true)]
        public bool ContainsXML { get; set; }

        /// <summary>
        /// True if the input file contains an image
        /// </summary>
        /// <value>True if the input file contains an image</value>
        [DataMember(Name = "ContainsImage", EmitDefaultValue = true)]
        public bool ContainsImage { get; set; }

        /// <summary>
        /// SHA1 hash of input file
        /// </summary>
        /// <value>SHA1 hash of input file</value>
        [DataMember(Name = "Hash_SHA1", EmitDefaultValue = false)]
        public string HashSHA1 { get; set; }

        /// <summary>
        /// Relevant subfile name in an archive format for identified threats, if any
        /// </summary>
        /// <value>Relevant subfile name in an archive format for identified threats, if any</value>
        [DataMember(Name = "RelevantSubfileName", EmitDefaultValue = false)]
        public string RelevantSubfileName { get; set; }

        /// <summary>
        /// SHA1 hash of relevant subfile name in an archive format for identified threats, if any
        /// </summary>
        /// <value>SHA1 hash of relevant subfile name in an archive format for identified threats, if any</value>
        [DataMember(Name = "RelevantSubfileHash_SHA1", EmitDefaultValue = false)]
        public string RelevantSubfileHashSHA1 { get; set; }

        /// <summary>
        /// True if there is a valid Authenticode signature, False otherwise
        /// </summary>
        /// <value>True if there is a valid Authenticode signature, False otherwise</value>
        [DataMember(Name = "IsAuthenticodeSigned", EmitDefaultValue = true)]
        public bool IsAuthenticodeSigned { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdditionalAdvancedScanInformation {\n");
            sb.Append("  ContainsJSON: ").Append(ContainsJSON).Append("\n");
            sb.Append("  ContainsXML: ").Append(ContainsXML).Append("\n");
            sb.Append("  ContainsImage: ").Append(ContainsImage).Append("\n");
            sb.Append("  HashSHA1: ").Append(HashSHA1).Append("\n");
            sb.Append("  RelevantSubfileName: ").Append(RelevantSubfileName).Append("\n");
            sb.Append("  RelevantSubfileHashSHA1: ").Append(RelevantSubfileHashSHA1).Append("\n");
            sb.Append("  IsAuthenticodeSigned: ").Append(IsAuthenticodeSigned).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
