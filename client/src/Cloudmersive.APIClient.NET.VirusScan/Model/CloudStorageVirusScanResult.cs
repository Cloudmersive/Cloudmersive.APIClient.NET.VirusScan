/*
 * virusapi
 *
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloudmersive.APIClient.NET.VirusScan.Client.OpenAPIDateConverter;

namespace Cloudmersive.APIClient.NET.VirusScan.Model
{
    /// <summary>
    /// Result of running a virus scan on cloud storage
    /// </summary>
    [DataContract(Name = "CloudStorageVirusScanResult")]
    public partial class CloudStorageVirusScanResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CloudStorageVirusScanResult" /> class.
        /// </summary>
        /// <param name="successful">True if the operation of retrieving the file, and scanning it were successfully completed, false if the file could not be downloaded from cloud storage, or if the file could not be scanned.  Note that successful completion does not mean the file is clean; for the output of the virus scanning operation itself, use the CleanResult and FoundViruses parameters..</param>
        /// <param name="cleanResult">True if the scan contained no viruses, false otherwise.</param>
        /// <param name="foundViruses">Array of viruses found, if any.</param>
        /// <param name="errorDetailedDescription">Detailed error message if the operation was not successful.</param>
        /// <param name="fileSize">Size in bytes of the file that was retrieved and scanned.</param>
        /// <param name="containsContentModerationRejection">Set to true when using NSFW Content Moderation in the Cloudmersive Storage Protect product (disabled by default).</param>
        /// <param name="containsExecutable">True if the scan contained an executable (application code), which can be a significant risk factor.</param>
        /// <param name="containsInvalidFile">True if the scan contained an invalid file (such as a PDF that is not a valid PDF, Word Document that is not a valid Word Document, etc.), which can be a significant risk factor.</param>
        /// <param name="containsScript">True if the scan contained a script (such as a PHP script, Python script, etc.) which can be a significant risk factor.</param>
        /// <param name="containsPasswordProtectedFile">True if the scan contained a password protected or encrypted file, which can be a significant risk factor.</param>
        /// <param name="containsRestrictedFileFormat">True if the uploaded file is of a type that is not allowed based on the optional restrictFileTypes parameter, false otherwise; if restrictFileTypes is not set, this will always be false.</param>
        /// <param name="containsMacros">True if the uploaded file contains embedded Macros of other embedded threats within the document, which can be a significant risk factor.</param>
        /// <param name="containsXmlExternalEntities">True if the uploaded file contains embedded XML External Entity threats of other embedded threats within the document, which can be a significant risk factor.</param>
        /// <param name="containsInsecureDeserialization">True if the uploaded file contains embedded Insecure Deserialization threats of other embedded threats within the document, which can be a significant risk factor.</param>
        /// <param name="containsHtml">True if the uploaded file contains HTML, which can be a significant risk factor.</param>
        /// <param name="containsUnsafeArchive">True if the uploaded file contains unsafe archive (e.g. zip) content, such as a Zip Bomb, or other configurations of a zip file that could lead to an unsafe extraction.</param>
        /// <param name="containsOleEmbeddedObject">True if the uploaded file contains an OLE embedded object, which can be a significant risk factor.</param>
        /// <param name="verifiedFileFormat">For file format verification-supported file formats, the contents-verified file format of the file.  Null indicates that the file format is not supported for contents verification.  If a Virus or Malware is found, this field will always be set to Null..</param>
        public CloudStorageVirusScanResult(bool successful = default(bool), bool cleanResult = default(bool), List<CloudStorageVirusFound> foundViruses = default(List<CloudStorageVirusFound>), string errorDetailedDescription = default(string), long fileSize = default(long), bool containsContentModerationRejection = default(bool), bool containsExecutable = default(bool), bool containsInvalidFile = default(bool), bool containsScript = default(bool), bool containsPasswordProtectedFile = default(bool), bool containsRestrictedFileFormat = default(bool), bool containsMacros = default(bool), bool containsXmlExternalEntities = default(bool), bool containsInsecureDeserialization = default(bool), bool containsHtml = default(bool), bool containsUnsafeArchive = default(bool), bool containsOleEmbeddedObject = default(bool), string verifiedFileFormat = default(string))
        {
            this.Successful = successful;
            this.CleanResult = cleanResult;
            this.FoundViruses = foundViruses;
            this.ErrorDetailedDescription = errorDetailedDescription;
            this.FileSize = fileSize;
            this.ContainsContentModerationRejection = containsContentModerationRejection;
            this.ContainsExecutable = containsExecutable;
            this.ContainsInvalidFile = containsInvalidFile;
            this.ContainsScript = containsScript;
            this.ContainsPasswordProtectedFile = containsPasswordProtectedFile;
            this.ContainsRestrictedFileFormat = containsRestrictedFileFormat;
            this.ContainsMacros = containsMacros;
            this.ContainsXmlExternalEntities = containsXmlExternalEntities;
            this.ContainsInsecureDeserialization = containsInsecureDeserialization;
            this.ContainsHtml = containsHtml;
            this.ContainsUnsafeArchive = containsUnsafeArchive;
            this.ContainsOleEmbeddedObject = containsOleEmbeddedObject;
            this.VerifiedFileFormat = verifiedFileFormat;
        }

        /// <summary>
        /// True if the operation of retrieving the file, and scanning it were successfully completed, false if the file could not be downloaded from cloud storage, or if the file could not be scanned.  Note that successful completion does not mean the file is clean; for the output of the virus scanning operation itself, use the CleanResult and FoundViruses parameters.
        /// </summary>
        /// <value>True if the operation of retrieving the file, and scanning it were successfully completed, false if the file could not be downloaded from cloud storage, or if the file could not be scanned.  Note that successful completion does not mean the file is clean; for the output of the virus scanning operation itself, use the CleanResult and FoundViruses parameters.</value>
        [DataMember(Name = "Successful", EmitDefaultValue = true)]
        public bool Successful { get; set; }

        /// <summary>
        /// True if the scan contained no viruses, false otherwise
        /// </summary>
        /// <value>True if the scan contained no viruses, false otherwise</value>
        [DataMember(Name = "CleanResult", EmitDefaultValue = true)]
        public bool CleanResult { get; set; }

        /// <summary>
        /// Array of viruses found, if any
        /// </summary>
        /// <value>Array of viruses found, if any</value>
        [DataMember(Name = "FoundViruses", EmitDefaultValue = false)]
        public List<CloudStorageVirusFound> FoundViruses { get; set; }

        /// <summary>
        /// Detailed error message if the operation was not successful
        /// </summary>
        /// <value>Detailed error message if the operation was not successful</value>
        [DataMember(Name = "ErrorDetailedDescription", EmitDefaultValue = false)]
        public string ErrorDetailedDescription { get; set; }

        /// <summary>
        /// Size in bytes of the file that was retrieved and scanned
        /// </summary>
        /// <value>Size in bytes of the file that was retrieved and scanned</value>
        [DataMember(Name = "FileSize", EmitDefaultValue = false)]
        public long FileSize { get; set; }

        /// <summary>
        /// Set to true when using NSFW Content Moderation in the Cloudmersive Storage Protect product (disabled by default)
        /// </summary>
        /// <value>Set to true when using NSFW Content Moderation in the Cloudmersive Storage Protect product (disabled by default)</value>
        [DataMember(Name = "ContainsContentModerationRejection", EmitDefaultValue = true)]
        public bool ContainsContentModerationRejection { get; set; }

        /// <summary>
        /// True if the scan contained an executable (application code), which can be a significant risk factor
        /// </summary>
        /// <value>True if the scan contained an executable (application code), which can be a significant risk factor</value>
        [DataMember(Name = "ContainsExecutable", EmitDefaultValue = true)]
        public bool ContainsExecutable { get; set; }

        /// <summary>
        /// True if the scan contained an invalid file (such as a PDF that is not a valid PDF, Word Document that is not a valid Word Document, etc.), which can be a significant risk factor
        /// </summary>
        /// <value>True if the scan contained an invalid file (such as a PDF that is not a valid PDF, Word Document that is not a valid Word Document, etc.), which can be a significant risk factor</value>
        [DataMember(Name = "ContainsInvalidFile", EmitDefaultValue = true)]
        public bool ContainsInvalidFile { get; set; }

        /// <summary>
        /// True if the scan contained a script (such as a PHP script, Python script, etc.) which can be a significant risk factor
        /// </summary>
        /// <value>True if the scan contained a script (such as a PHP script, Python script, etc.) which can be a significant risk factor</value>
        [DataMember(Name = "ContainsScript", EmitDefaultValue = true)]
        public bool ContainsScript { get; set; }

        /// <summary>
        /// True if the scan contained a password protected or encrypted file, which can be a significant risk factor
        /// </summary>
        /// <value>True if the scan contained a password protected or encrypted file, which can be a significant risk factor</value>
        [DataMember(Name = "ContainsPasswordProtectedFile", EmitDefaultValue = true)]
        public bool ContainsPasswordProtectedFile { get; set; }

        /// <summary>
        /// True if the uploaded file is of a type that is not allowed based on the optional restrictFileTypes parameter, false otherwise; if restrictFileTypes is not set, this will always be false
        /// </summary>
        /// <value>True if the uploaded file is of a type that is not allowed based on the optional restrictFileTypes parameter, false otherwise; if restrictFileTypes is not set, this will always be false</value>
        [DataMember(Name = "ContainsRestrictedFileFormat", EmitDefaultValue = true)]
        public bool ContainsRestrictedFileFormat { get; set; }

        /// <summary>
        /// True if the uploaded file contains embedded Macros of other embedded threats within the document, which can be a significant risk factor
        /// </summary>
        /// <value>True if the uploaded file contains embedded Macros of other embedded threats within the document, which can be a significant risk factor</value>
        [DataMember(Name = "ContainsMacros", EmitDefaultValue = true)]
        public bool ContainsMacros { get; set; }

        /// <summary>
        /// True if the uploaded file contains embedded XML External Entity threats of other embedded threats within the document, which can be a significant risk factor
        /// </summary>
        /// <value>True if the uploaded file contains embedded XML External Entity threats of other embedded threats within the document, which can be a significant risk factor</value>
        [DataMember(Name = "ContainsXmlExternalEntities", EmitDefaultValue = true)]
        public bool ContainsXmlExternalEntities { get; set; }

        /// <summary>
        /// True if the uploaded file contains embedded Insecure Deserialization threats of other embedded threats within the document, which can be a significant risk factor
        /// </summary>
        /// <value>True if the uploaded file contains embedded Insecure Deserialization threats of other embedded threats within the document, which can be a significant risk factor</value>
        [DataMember(Name = "ContainsInsecureDeserialization", EmitDefaultValue = true)]
        public bool ContainsInsecureDeserialization { get; set; }

        /// <summary>
        /// True if the uploaded file contains HTML, which can be a significant risk factor
        /// </summary>
        /// <value>True if the uploaded file contains HTML, which can be a significant risk factor</value>
        [DataMember(Name = "ContainsHtml", EmitDefaultValue = true)]
        public bool ContainsHtml { get; set; }

        /// <summary>
        /// True if the uploaded file contains unsafe archive (e.g. zip) content, such as a Zip Bomb, or other configurations of a zip file that could lead to an unsafe extraction
        /// </summary>
        /// <value>True if the uploaded file contains unsafe archive (e.g. zip) content, such as a Zip Bomb, or other configurations of a zip file that could lead to an unsafe extraction</value>
        [DataMember(Name = "ContainsUnsafeArchive", EmitDefaultValue = true)]
        public bool ContainsUnsafeArchive { get; set; }

        /// <summary>
        /// True if the uploaded file contains an OLE embedded object, which can be a significant risk factor
        /// </summary>
        /// <value>True if the uploaded file contains an OLE embedded object, which can be a significant risk factor</value>
        [DataMember(Name = "ContainsOleEmbeddedObject", EmitDefaultValue = true)]
        public bool ContainsOleEmbeddedObject { get; set; }

        /// <summary>
        /// For file format verification-supported file formats, the contents-verified file format of the file.  Null indicates that the file format is not supported for contents verification.  If a Virus or Malware is found, this field will always be set to Null.
        /// </summary>
        /// <value>For file format verification-supported file formats, the contents-verified file format of the file.  Null indicates that the file format is not supported for contents verification.  If a Virus or Malware is found, this field will always be set to Null.</value>
        [DataMember(Name = "VerifiedFileFormat", EmitDefaultValue = false)]
        public string VerifiedFileFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CloudStorageVirusScanResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  CleanResult: ").Append(CleanResult).Append("\n");
            sb.Append("  FoundViruses: ").Append(FoundViruses).Append("\n");
            sb.Append("  ErrorDetailedDescription: ").Append(ErrorDetailedDescription).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  ContainsContentModerationRejection: ").Append(ContainsContentModerationRejection).Append("\n");
            sb.Append("  ContainsExecutable: ").Append(ContainsExecutable).Append("\n");
            sb.Append("  ContainsInvalidFile: ").Append(ContainsInvalidFile).Append("\n");
            sb.Append("  ContainsScript: ").Append(ContainsScript).Append("\n");
            sb.Append("  ContainsPasswordProtectedFile: ").Append(ContainsPasswordProtectedFile).Append("\n");
            sb.Append("  ContainsRestrictedFileFormat: ").Append(ContainsRestrictedFileFormat).Append("\n");
            sb.Append("  ContainsMacros: ").Append(ContainsMacros).Append("\n");
            sb.Append("  ContainsXmlExternalEntities: ").Append(ContainsXmlExternalEntities).Append("\n");
            sb.Append("  ContainsInsecureDeserialization: ").Append(ContainsInsecureDeserialization).Append("\n");
            sb.Append("  ContainsHtml: ").Append(ContainsHtml).Append("\n");
            sb.Append("  ContainsUnsafeArchive: ").Append(ContainsUnsafeArchive).Append("\n");
            sb.Append("  ContainsOleEmbeddedObject: ").Append(ContainsOleEmbeddedObject).Append("\n");
            sb.Append("  VerifiedFileFormat: ").Append(VerifiedFileFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
