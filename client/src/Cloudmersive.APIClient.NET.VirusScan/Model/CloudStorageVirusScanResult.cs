/* 
 * virusapi
 *
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.VirusScan.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.VirusScan.Model
{
    /// <summary>
    /// Result of running a virus scan on cloud storage
    /// </summary>
    [DataContract]
    public partial class CloudStorageVirusScanResult :  IEquatable<CloudStorageVirusScanResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CloudStorageVirusScanResult" /> class.
        /// </summary>
        /// <param name="successful">True if the operation of retrieving the file, and scanning it were successfully completed, false if the file could not be downloaded from cloud storage, or if the file could not be scanned.  Note that successful completion does not mean the file is clean; for the output of the virus scanning operation itself, use the CleanResult and FoundViruses parameters..</param>
        /// <param name="cleanResult">True if the scan contained no viruses, false otherwise.</param>
        /// <param name="foundViruses">Array of viruses found, if any.</param>
        /// <param name="errorDetailedDescription">Detailed error message if the operation was not successful.</param>
        /// <param name="fileSize">Size in bytes of the file that was retrieved and scanned.</param>
        /// <param name="containsContentModerationRejection">Set to true when using NSFW Content Moderation in the Cloudmersive Storage Protect product (disabled by default).</param>
        public CloudStorageVirusScanResult(bool? successful = default(bool?), bool? cleanResult = default(bool?), List<CloudStorageVirusFound> foundViruses = default(List<CloudStorageVirusFound>), string errorDetailedDescription = default(string), long? fileSize = default(long?), bool? containsContentModerationRejection = default(bool?))
        {
            this.Successful = successful;
            this.CleanResult = cleanResult;
            this.FoundViruses = foundViruses;
            this.ErrorDetailedDescription = errorDetailedDescription;
            this.FileSize = fileSize;
            this.ContainsContentModerationRejection = containsContentModerationRejection;
        }
        
        /// <summary>
        /// True if the operation of retrieving the file, and scanning it were successfully completed, false if the file could not be downloaded from cloud storage, or if the file could not be scanned.  Note that successful completion does not mean the file is clean; for the output of the virus scanning operation itself, use the CleanResult and FoundViruses parameters.
        /// </summary>
        /// <value>True if the operation of retrieving the file, and scanning it were successfully completed, false if the file could not be downloaded from cloud storage, or if the file could not be scanned.  Note that successful completion does not mean the file is clean; for the output of the virus scanning operation itself, use the CleanResult and FoundViruses parameters.</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// True if the scan contained no viruses, false otherwise
        /// </summary>
        /// <value>True if the scan contained no viruses, false otherwise</value>
        [DataMember(Name="CleanResult", EmitDefaultValue=false)]
        public bool? CleanResult { get; set; }

        /// <summary>
        /// Array of viruses found, if any
        /// </summary>
        /// <value>Array of viruses found, if any</value>
        [DataMember(Name="FoundViruses", EmitDefaultValue=false)]
        public List<CloudStorageVirusFound> FoundViruses { get; set; }

        /// <summary>
        /// Detailed error message if the operation was not successful
        /// </summary>
        /// <value>Detailed error message if the operation was not successful</value>
        [DataMember(Name="ErrorDetailedDescription", EmitDefaultValue=false)]
        public string ErrorDetailedDescription { get; set; }

        /// <summary>
        /// Size in bytes of the file that was retrieved and scanned
        /// </summary>
        /// <value>Size in bytes of the file that was retrieved and scanned</value>
        [DataMember(Name="FileSize", EmitDefaultValue=false)]
        public long? FileSize { get; set; }

        /// <summary>
        /// Set to true when using NSFW Content Moderation in the Cloudmersive Storage Protect product (disabled by default)
        /// </summary>
        /// <value>Set to true when using NSFW Content Moderation in the Cloudmersive Storage Protect product (disabled by default)</value>
        [DataMember(Name="ContainsContentModerationRejection", EmitDefaultValue=false)]
        public bool? ContainsContentModerationRejection { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CloudStorageVirusScanResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  CleanResult: ").Append(CleanResult).Append("\n");
            sb.Append("  FoundViruses: ").Append(FoundViruses).Append("\n");
            sb.Append("  ErrorDetailedDescription: ").Append(ErrorDetailedDescription).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("  ContainsContentModerationRejection: ").Append(ContainsContentModerationRejection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CloudStorageVirusScanResult);
        }

        /// <summary>
        /// Returns true if CloudStorageVirusScanResult instances are equal
        /// </summary>
        /// <param name="input">Instance of CloudStorageVirusScanResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CloudStorageVirusScanResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.CleanResult == input.CleanResult ||
                    (this.CleanResult != null &&
                    this.CleanResult.Equals(input.CleanResult))
                ) && 
                (
                    this.FoundViruses == input.FoundViruses ||
                    this.FoundViruses != null &&
                    this.FoundViruses.SequenceEqual(input.FoundViruses)
                ) && 
                (
                    this.ErrorDetailedDescription == input.ErrorDetailedDescription ||
                    (this.ErrorDetailedDescription != null &&
                    this.ErrorDetailedDescription.Equals(input.ErrorDetailedDescription))
                ) && 
                (
                    this.FileSize == input.FileSize ||
                    (this.FileSize != null &&
                    this.FileSize.Equals(input.FileSize))
                ) && 
                (
                    this.ContainsContentModerationRejection == input.ContainsContentModerationRejection ||
                    (this.ContainsContentModerationRejection != null &&
                    this.ContainsContentModerationRejection.Equals(input.ContainsContentModerationRejection))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.CleanResult != null)
                    hashCode = hashCode * 59 + this.CleanResult.GetHashCode();
                if (this.FoundViruses != null)
                    hashCode = hashCode * 59 + this.FoundViruses.GetHashCode();
                if (this.ErrorDetailedDescription != null)
                    hashCode = hashCode * 59 + this.ErrorDetailedDescription.GetHashCode();
                if (this.FileSize != null)
                    hashCode = hashCode * 59 + this.FileSize.GetHashCode();
                if (this.ContainsContentModerationRejection != null)
                    hashCode = hashCode * 59 + this.ContainsContentModerationRejection.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
