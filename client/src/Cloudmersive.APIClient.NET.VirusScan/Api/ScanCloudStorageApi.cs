/*
 * virusapi
 *
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Cloudmersive.APIClient.NET.VirusScan.Client;
using Cloudmersive.APIClient.NET.VirusScan.Model;

namespace Cloudmersive.APIClient.NET.VirusScan.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScanCloudStorageApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the status and result of a Scan Cloud Storage Batch Job
        /// </summary>
        /// <remarks>
        /// Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asyncJobID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScanCloudStorageJobStatusResult</returns>
        ScanCloudStorageJobStatusResult ScanCloudStorageGetAsyncJobStatus(string asyncJobID, int operationIndex = 0);

        /// <summary>
        /// Get the status and result of a Scan Cloud Storage Batch Job
        /// </summary>
        /// <remarks>
        /// Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asyncJobID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScanCloudStorageJobStatusResult</returns>
        ApiResponse<ScanCloudStorageJobStatusResult> ScanCloudStorageGetAsyncJobStatusWithHttpInfo(string asyncJobID, int operationIndex = 0);
        /// <summary>
        /// Scan an AWS S3 file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        CloudStorageVirusScanResult ScanCloudStorageScanAwsS3File(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), int operationIndex = 0);

        /// <summary>
        /// Scan an AWS S3 file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        ApiResponse<CloudStorageVirusScanResult> ScanCloudStorageScanAwsS3FileWithHttpInfo(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), int operationIndex = 0);
        /// <summary>
        /// Advanced Scan an AWS S3 file for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan the contents of a single AWS S3 file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageAdvancedVirusScanResult</returns>
        CloudStorageAdvancedVirusScanResult ScanCloudStorageScanAwsS3FileAdvanced(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0);

        /// <summary>
        /// Advanced Scan an AWS S3 file for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan the contents of a single AWS S3 file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageAdvancedVirusScanResult</returns>
        ApiResponse<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanAwsS3FileAdvancedWithHttpInfo(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0);
        /// <summary>
        /// Scan an Azure Blob for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        CloudStorageVirusScanResult ScanCloudStorageScanAzureBlob(string connectionString, string containerName, string blobPath, int operationIndex = 0);

        /// <summary>
        /// Scan an Azure Blob for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        ApiResponse<CloudStorageVirusScanResult> ScanCloudStorageScanAzureBlobWithHttpInfo(string connectionString, string containerName, string blobPath, int operationIndex = 0);
        /// <summary>
        /// Advanced Scan an Azure Blob for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan the contents of a single Azure Blob and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageAdvancedVirusScanResult</returns>
        CloudStorageAdvancedVirusScanResult ScanCloudStorageScanAzureBlobAdvanced(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0);

        /// <summary>
        /// Advanced Scan an Azure Blob for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan the contents of a single Azure Blob and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageAdvancedVirusScanResult</returns>
        ApiResponse<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanAzureBlobAdvancedWithHttpInfo(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0);
        /// <summary>
        /// Advanced Scan an Azure Blob for viruses via a batch job
        /// </summary>
        /// <remarks>
        /// Via a batch job, advanced Scan the contents of a single Azure Blob and its content for viruses and threats, great for larger/longer processing jobs.  Requires Managed Instance or Private Cloud.  Returns a job ID which you can then use the Get Job Status API to get the status and output of the job.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScanCloudStorageBatchJobCreateResult</returns>
        ScanCloudStorageBatchJobCreateResult ScanCloudStorageScanAzureBlobAdvancedBatchJob(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0);

        /// <summary>
        /// Advanced Scan an Azure Blob for viruses via a batch job
        /// </summary>
        /// <remarks>
        /// Via a batch job, advanced Scan the contents of a single Azure Blob and its content for viruses and threats, great for larger/longer processing jobs.  Requires Managed Instance or Private Cloud.  Returns a job ID which you can then use the Get Job Status API to get the status and output of the job.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScanCloudStorageBatchJobCreateResult</returns>
        ApiResponse<ScanCloudStorageBatchJobCreateResult> ScanCloudStorageScanAzureBlobAdvancedBatchJobWithHttpInfo(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0);
        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        CloudStorageVirusScanResult ScanCloudStorageScanGcpStorageFile(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, int operationIndex = 0);

        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        ApiResponse<CloudStorageVirusScanResult> ScanCloudStorageScanGcpStorageFileWithHttpInfo(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, int operationIndex = 0);
        /// <summary>
        /// Advanced Scan an Google Cloud Platform (GCP) Storage file for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageAdvancedVirusScanResult</returns>
        CloudStorageAdvancedVirusScanResult ScanCloudStorageScanGcpStorageFileAdvanced(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0);

        /// <summary>
        /// Advanced Scan an Google Cloud Platform (GCP) Storage file for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageAdvancedVirusScanResult</returns>
        ApiResponse<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanGcpStorageFileAdvancedWithHttpInfo(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0);
        /// <summary>
        /// Virus Scan a file in a SharePoint Online Site Drive
        /// </summary>
        /// <remarks>
        /// Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        CloudStorageVirusScanResult ScanCloudStorageScanSharePointOnlineFile(string clientID, string clientSecret, string sharepointDomainName, string siteID, string filePath, string tenantID = default(string), string itemID = default(string), int operationIndex = 0);

        /// <summary>
        /// Virus Scan a file in a SharePoint Online Site Drive
        /// </summary>
        /// <remarks>
        /// Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        ApiResponse<CloudStorageVirusScanResult> ScanCloudStorageScanSharePointOnlineFileWithHttpInfo(string clientID, string clientSecret, string sharepointDomainName, string siteID, string filePath, string tenantID = default(string), string itemID = default(string), int operationIndex = 0);
        /// <summary>
        /// Advanced Virus Scan a file in a SharePoint Online Site Drive
        /// </summary>
        /// <remarks>
        /// Advanced Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageAdvancedVirusScanResult</returns>
        CloudStorageAdvancedVirusScanResult ScanCloudStorageScanSharePointOnlineFileAdvanced(string clientID, string clientSecret, string sharepointDomainName, string siteID, string tenantID = default(string), string filePath = default(string), string itemID = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string restrictFileTypes = default(string), int operationIndex = 0);

        /// <summary>
        /// Advanced Virus Scan a file in a SharePoint Online Site Drive
        /// </summary>
        /// <remarks>
        /// Advanced Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageAdvancedVirusScanResult</returns>
        ApiResponse<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanSharePointOnlineFileAdvancedWithHttpInfo(string clientID, string clientSecret, string sharepointDomainName, string siteID, string tenantID = default(string), string filePath = default(string), string itemID = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string restrictFileTypes = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScanCloudStorageApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the status and result of a Scan Cloud Storage Batch Job
        /// </summary>
        /// <remarks>
        /// Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asyncJobID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScanCloudStorageJobStatusResult</returns>
        System.Threading.Tasks.Task<ScanCloudStorageJobStatusResult> ScanCloudStorageGetAsyncJobStatusAsync(string asyncJobID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get the status and result of a Scan Cloud Storage Batch Job
        /// </summary>
        /// <remarks>
        /// Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asyncJobID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScanCloudStorageJobStatusResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScanCloudStorageJobStatusResult>> ScanCloudStorageGetAsyncJobStatusWithHttpInfoAsync(string asyncJobID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Scan an AWS S3 file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanAwsS3FileAsync(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Scan an AWS S3 file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanAwsS3FileWithHttpInfoAsync(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Advanced Scan an AWS S3 file for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan the contents of a single AWS S3 file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageAdvancedVirusScanResult</returns>
        System.Threading.Tasks.Task<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanAwsS3FileAdvancedAsync(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Advanced Scan an AWS S3 file for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan the contents of a single AWS S3 file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageAdvancedVirusScanResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageAdvancedVirusScanResult>> ScanCloudStorageScanAwsS3FileAdvancedWithHttpInfoAsync(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Scan an Azure Blob for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanAzureBlobAsync(string connectionString, string containerName, string blobPath, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Scan an Azure Blob for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanAzureBlobWithHttpInfoAsync(string connectionString, string containerName, string blobPath, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Advanced Scan an Azure Blob for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan the contents of a single Azure Blob and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageAdvancedVirusScanResult</returns>
        System.Threading.Tasks.Task<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanAzureBlobAdvancedAsync(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Advanced Scan an Azure Blob for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan the contents of a single Azure Blob and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageAdvancedVirusScanResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageAdvancedVirusScanResult>> ScanCloudStorageScanAzureBlobAdvancedWithHttpInfoAsync(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Advanced Scan an Azure Blob for viruses via a batch job
        /// </summary>
        /// <remarks>
        /// Via a batch job, advanced Scan the contents of a single Azure Blob and its content for viruses and threats, great for larger/longer processing jobs.  Requires Managed Instance or Private Cloud.  Returns a job ID which you can then use the Get Job Status API to get the status and output of the job.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScanCloudStorageBatchJobCreateResult</returns>
        System.Threading.Tasks.Task<ScanCloudStorageBatchJobCreateResult> ScanCloudStorageScanAzureBlobAdvancedBatchJobAsync(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Advanced Scan an Azure Blob for viruses via a batch job
        /// </summary>
        /// <remarks>
        /// Via a batch job, advanced Scan the contents of a single Azure Blob and its content for viruses and threats, great for larger/longer processing jobs.  Requires Managed Instance or Private Cloud.  Returns a job ID which you can then use the Get Job Status API to get the status and output of the job.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScanCloudStorageBatchJobCreateResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScanCloudStorageBatchJobCreateResult>> ScanCloudStorageScanAzureBlobAdvancedBatchJobWithHttpInfoAsync(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanGcpStorageFileAsync(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanGcpStorageFileWithHttpInfoAsync(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Advanced Scan an Google Cloud Platform (GCP) Storage file for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageAdvancedVirusScanResult</returns>
        System.Threading.Tasks.Task<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanGcpStorageFileAdvancedAsync(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Advanced Scan an Google Cloud Platform (GCP) Storage file for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageAdvancedVirusScanResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageAdvancedVirusScanResult>> ScanCloudStorageScanGcpStorageFileAdvancedWithHttpInfoAsync(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Virus Scan a file in a SharePoint Online Site Drive
        /// </summary>
        /// <remarks>
        /// Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanSharePointOnlineFileAsync(string clientID, string clientSecret, string sharepointDomainName, string siteID, string filePath, string tenantID = default(string), string itemID = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Virus Scan a file in a SharePoint Online Site Drive
        /// </summary>
        /// <remarks>
        /// Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanSharePointOnlineFileWithHttpInfoAsync(string clientID, string clientSecret, string sharepointDomainName, string siteID, string filePath, string tenantID = default(string), string itemID = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Advanced Virus Scan a file in a SharePoint Online Site Drive
        /// </summary>
        /// <remarks>
        /// Advanced Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageAdvancedVirusScanResult</returns>
        System.Threading.Tasks.Task<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanSharePointOnlineFileAdvancedAsync(string clientID, string clientSecret, string sharepointDomainName, string siteID, string tenantID = default(string), string filePath = default(string), string itemID = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Advanced Virus Scan a file in a SharePoint Online Site Drive
        /// </summary>
        /// <remarks>
        /// Advanced Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageAdvancedVirusScanResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageAdvancedVirusScanResult>> ScanCloudStorageScanSharePointOnlineFileAdvancedWithHttpInfoAsync(string clientID, string clientSecret, string sharepointDomainName, string siteID, string tenantID = default(string), string filePath = default(string), string itemID = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScanCloudStorageApi : IScanCloudStorageApiSync, IScanCloudStorageApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScanCloudStorageApi : IScanCloudStorageApi
    {
        private Cloudmersive.APIClient.NET.VirusScan.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanCloudStorageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScanCloudStorageApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanCloudStorageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScanCloudStorageApi(string basePath)
        {
            this.Configuration = Cloudmersive.APIClient.NET.VirusScan.Client.Configuration.MergeConfigurations(
                Cloudmersive.APIClient.NET.VirusScan.Client.GlobalConfiguration.Instance,
                new Cloudmersive.APIClient.NET.VirusScan.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Cloudmersive.APIClient.NET.VirusScan.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloudmersive.APIClient.NET.VirusScan.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Cloudmersive.APIClient.NET.VirusScan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanCloudStorageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScanCloudStorageApi(Cloudmersive.APIClient.NET.VirusScan.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Cloudmersive.APIClient.NET.VirusScan.Client.Configuration.MergeConfigurations(
                Cloudmersive.APIClient.NET.VirusScan.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Cloudmersive.APIClient.NET.VirusScan.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloudmersive.APIClient.NET.VirusScan.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Cloudmersive.APIClient.NET.VirusScan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanCloudStorageApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ScanCloudStorageApi(Cloudmersive.APIClient.NET.VirusScan.Client.ISynchronousClient client, Cloudmersive.APIClient.NET.VirusScan.Client.IAsynchronousClient asyncClient, Cloudmersive.APIClient.NET.VirusScan.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Cloudmersive.APIClient.NET.VirusScan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Cloudmersive.APIClient.NET.VirusScan.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.VirusScan.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the status and result of a Scan Cloud Storage Batch Job Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asyncJobID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScanCloudStorageJobStatusResult</returns>
        public ScanCloudStorageJobStatusResult ScanCloudStorageGetAsyncJobStatus(string asyncJobID, int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<ScanCloudStorageJobStatusResult> localVarResponse = ScanCloudStorageGetAsyncJobStatusWithHttpInfo(asyncJobID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status and result of a Scan Cloud Storage Batch Job Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asyncJobID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScanCloudStorageJobStatusResult</returns>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<ScanCloudStorageJobStatusResult> ScanCloudStorageGetAsyncJobStatusWithHttpInfo(string asyncJobID, int operationIndex = 0)
        {
            // verify the required parameter 'asyncJobID' is set
            if (asyncJobID == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'asyncJobID' when calling ScanCloudStorageApi->ScanCloudStorageGetAsyncJobStatus");
            }

            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToMultiMap("", "AsyncJobID", asyncJobID));

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageGetAsyncJobStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScanCloudStorageJobStatusResult>("/virus/scan/cloud-storage/batch-job/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageGetAsyncJobStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the status and result of a Scan Cloud Storage Batch Job Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asyncJobID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScanCloudStorageJobStatusResult</returns>
        public async System.Threading.Tasks.Task<ScanCloudStorageJobStatusResult> ScanCloudStorageGetAsyncJobStatusAsync(string asyncJobID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<ScanCloudStorageJobStatusResult> localVarResponse = await ScanCloudStorageGetAsyncJobStatusWithHttpInfoAsync(asyncJobID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the status and result of a Scan Cloud Storage Batch Job Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="asyncJobID"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScanCloudStorageJobStatusResult)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<ScanCloudStorageJobStatusResult>> ScanCloudStorageGetAsyncJobStatusWithHttpInfoAsync(string asyncJobID, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'asyncJobID' is set
            if (asyncJobID == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'asyncJobID' when calling ScanCloudStorageApi->ScanCloudStorageGetAsyncJobStatus");
            }


            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToMultiMap("", "AsyncJobID", asyncJobID));

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageGetAsyncJobStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScanCloudStorageJobStatusResult>("/virus/scan/cloud-storage/batch-job/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageGetAsyncJobStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan an AWS S3 file for viruses Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        public CloudStorageVirusScanResult ScanCloudStorageScanAwsS3File(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult> localVarResponse = ScanCloudStorageScanAwsS3FileWithHttpInfo(accessKey, secretKey, bucketRegion, bucketName, keyName, roleArn);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan an AWS S3 file for viruses Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult> ScanCloudStorageScanAwsS3FileWithHttpInfo(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'accessKey' is set
            if (accessKey == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'accessKey' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            }

            // verify the required parameter 'secretKey' is set
            if (secretKey == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'secretKey' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            }

            // verify the required parameter 'bucketRegion' is set
            if (bucketRegion == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'bucketRegion' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            }

            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'bucketName' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            }

            // verify the required parameter 'keyName' is set
            if (keyName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'keyName' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            }

            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("accessKey", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(accessKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("secretKey", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(secretKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("bucketRegion", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(bucketRegion)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("bucketName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(bucketName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("keyName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(keyName)); // header parameter
            if (roleArn != null)
            {
                localVarRequestOptions.HeaderParameters.Add("roleArn", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(roleArn)); // header parameter
            }

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanAwsS3File";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CloudStorageVirusScanResult>("/virus/scan/cloud-storage/aws-s3/single", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanAwsS3File", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan an AWS S3 file for viruses Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        public async System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanAwsS3FileAsync(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult> localVarResponse = await ScanCloudStorageScanAwsS3FileWithHttpInfoAsync(accessKey, secretKey, bucketRegion, bucketName, keyName, roleArn, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan an AWS S3 file for viruses Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanAwsS3FileWithHttpInfoAsync(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'accessKey' is set
            if (accessKey == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'accessKey' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            }

            // verify the required parameter 'secretKey' is set
            if (secretKey == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'secretKey' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            }

            // verify the required parameter 'bucketRegion' is set
            if (bucketRegion == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'bucketRegion' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            }

            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'bucketName' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            }

            // verify the required parameter 'keyName' is set
            if (keyName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'keyName' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            }


            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("accessKey", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(accessKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("secretKey", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(secretKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("bucketRegion", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(bucketRegion)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("bucketName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(bucketName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("keyName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(keyName)); // header parameter
            if (roleArn != null)
            {
                localVarRequestOptions.HeaderParameters.Add("roleArn", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(roleArn)); // header parameter
            }

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanAwsS3File";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CloudStorageVirusScanResult>("/virus/scan/cloud-storage/aws-s3/single", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanAwsS3File", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Advanced Scan an AWS S3 file for viruses Advanced Scan the contents of a single AWS S3 file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageAdvancedVirusScanResult</returns>
        public CloudStorageAdvancedVirusScanResult ScanCloudStorageScanAwsS3FileAdvanced(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult> localVarResponse = ScanCloudStorageScanAwsS3FileAdvancedWithHttpInfo(accessKey, secretKey, bucketRegion, bucketName, keyName, roleArn, allowExecutables, allowInvalidFiles, allowScripts, allowPasswordProtectedFiles, allowMacros, allowXmlExternalEntities, allowInsecureDeserialization, allowHtml, allowUnsafeArchives, allowOleEmbeddedObject, allowUnwantedAction, options, restrictFileTypes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Scan an AWS S3 file for viruses Advanced Scan the contents of a single AWS S3 file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageAdvancedVirusScanResult</returns>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanAwsS3FileAdvancedWithHttpInfo(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'accessKey' is set
            if (accessKey == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'accessKey' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3FileAdvanced");
            }

            // verify the required parameter 'secretKey' is set
            if (secretKey == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'secretKey' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3FileAdvanced");
            }

            // verify the required parameter 'bucketRegion' is set
            if (bucketRegion == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'bucketRegion' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3FileAdvanced");
            }

            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'bucketName' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3FileAdvanced");
            }

            // verify the required parameter 'keyName' is set
            if (keyName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'keyName' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3FileAdvanced");
            }

            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("accessKey", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(accessKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("secretKey", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(secretKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("bucketRegion", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(bucketRegion)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("bucketName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(bucketName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("keyName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(keyName)); // header parameter
            if (roleArn != null)
            {
                localVarRequestOptions.HeaderParameters.Add("roleArn", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(roleArn)); // header parameter
            }
            if (allowExecutables != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowExecutables", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowExecutables)); // header parameter
            }
            if (allowInvalidFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInvalidFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInvalidFiles)); // header parameter
            }
            if (allowScripts != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowScripts", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowScripts)); // header parameter
            }
            if (allowPasswordProtectedFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowPasswordProtectedFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowPasswordProtectedFiles)); // header parameter
            }
            if (allowMacros != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowMacros", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowMacros)); // header parameter
            }
            if (allowXmlExternalEntities != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowXmlExternalEntities", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowXmlExternalEntities)); // header parameter
            }
            if (allowInsecureDeserialization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInsecureDeserialization", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInsecureDeserialization)); // header parameter
            }
            if (allowHtml != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowHtml", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowHtml)); // header parameter
            }
            if (allowUnsafeArchives != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnsafeArchives", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnsafeArchives)); // header parameter
            }
            if (allowOleEmbeddedObject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowOleEmbeddedObject", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowOleEmbeddedObject)); // header parameter
            }
            if (allowUnwantedAction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnwantedAction", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnwantedAction)); // header parameter
            }
            if (options != null)
            {
                localVarRequestOptions.HeaderParameters.Add("options", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(options)); // header parameter
            }
            if (restrictFileTypes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("restrictFileTypes", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(restrictFileTypes)); // header parameter
            }

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanAwsS3FileAdvanced";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CloudStorageAdvancedVirusScanResult>("/virus/scan/cloud-storage/aws-s3/single/advanced", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanAwsS3FileAdvanced", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Advanced Scan an AWS S3 file for viruses Advanced Scan the contents of a single AWS S3 file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageAdvancedVirusScanResult</returns>
        public async System.Threading.Tasks.Task<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanAwsS3FileAdvancedAsync(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult> localVarResponse = await ScanCloudStorageScanAwsS3FileAdvancedWithHttpInfoAsync(accessKey, secretKey, bucketRegion, bucketName, keyName, roleArn, allowExecutables, allowInvalidFiles, allowScripts, allowPasswordProtectedFiles, allowMacros, allowXmlExternalEntities, allowInsecureDeserialization, allowHtml, allowUnsafeArchives, allowOleEmbeddedObject, allowUnwantedAction, options, restrictFileTypes, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Scan an AWS S3 file for viruses Advanced Scan the contents of a single AWS S3 file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="roleArn">Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageAdvancedVirusScanResult)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult>> ScanCloudStorageScanAwsS3FileAdvancedWithHttpInfoAsync(string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName, string roleArn = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'accessKey' is set
            if (accessKey == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'accessKey' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3FileAdvanced");
            }

            // verify the required parameter 'secretKey' is set
            if (secretKey == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'secretKey' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3FileAdvanced");
            }

            // verify the required parameter 'bucketRegion' is set
            if (bucketRegion == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'bucketRegion' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3FileAdvanced");
            }

            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'bucketName' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3FileAdvanced");
            }

            // verify the required parameter 'keyName' is set
            if (keyName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'keyName' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3FileAdvanced");
            }


            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("accessKey", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(accessKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("secretKey", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(secretKey)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("bucketRegion", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(bucketRegion)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("bucketName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(bucketName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("keyName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(keyName)); // header parameter
            if (roleArn != null)
            {
                localVarRequestOptions.HeaderParameters.Add("roleArn", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(roleArn)); // header parameter
            }
            if (allowExecutables != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowExecutables", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowExecutables)); // header parameter
            }
            if (allowInvalidFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInvalidFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInvalidFiles)); // header parameter
            }
            if (allowScripts != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowScripts", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowScripts)); // header parameter
            }
            if (allowPasswordProtectedFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowPasswordProtectedFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowPasswordProtectedFiles)); // header parameter
            }
            if (allowMacros != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowMacros", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowMacros)); // header parameter
            }
            if (allowXmlExternalEntities != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowXmlExternalEntities", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowXmlExternalEntities)); // header parameter
            }
            if (allowInsecureDeserialization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInsecureDeserialization", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInsecureDeserialization)); // header parameter
            }
            if (allowHtml != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowHtml", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowHtml)); // header parameter
            }
            if (allowUnsafeArchives != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnsafeArchives", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnsafeArchives)); // header parameter
            }
            if (allowOleEmbeddedObject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowOleEmbeddedObject", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowOleEmbeddedObject)); // header parameter
            }
            if (allowUnwantedAction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnwantedAction", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnwantedAction)); // header parameter
            }
            if (options != null)
            {
                localVarRequestOptions.HeaderParameters.Add("options", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(options)); // header parameter
            }
            if (restrictFileTypes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("restrictFileTypes", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(restrictFileTypes)); // header parameter
            }

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanAwsS3FileAdvanced";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CloudStorageAdvancedVirusScanResult>("/virus/scan/cloud-storage/aws-s3/single/advanced", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanAwsS3FileAdvanced", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan an Azure Blob for viruses Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        public CloudStorageVirusScanResult ScanCloudStorageScanAzureBlob(string connectionString, string containerName, string blobPath, int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult> localVarResponse = ScanCloudStorageScanAzureBlobWithHttpInfo(connectionString, containerName, blobPath);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan an Azure Blob for viruses Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult> ScanCloudStorageScanAzureBlobWithHttpInfo(string connectionString, string containerName, string blobPath, int operationIndex = 0)
        {
            // verify the required parameter 'connectionString' is set
            if (connectionString == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'connectionString' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlob");
            }

            // verify the required parameter 'containerName' is set
            if (containerName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'containerName' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlob");
            }

            // verify the required parameter 'blobPath' is set
            if (blobPath == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'blobPath' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlob");
            }

            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("connectionString", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(connectionString)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("containerName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(containerName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("blobPath", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(blobPath)); // header parameter

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanAzureBlob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CloudStorageVirusScanResult>("/virus/scan/cloud-storage/azure-blob/single", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanAzureBlob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan an Azure Blob for viruses Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        public async System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanAzureBlobAsync(string connectionString, string containerName, string blobPath, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult> localVarResponse = await ScanCloudStorageScanAzureBlobWithHttpInfoAsync(connectionString, containerName, blobPath, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan an Azure Blob for viruses Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanAzureBlobWithHttpInfoAsync(string connectionString, string containerName, string blobPath, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'connectionString' is set
            if (connectionString == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'connectionString' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlob");
            }

            // verify the required parameter 'containerName' is set
            if (containerName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'containerName' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlob");
            }

            // verify the required parameter 'blobPath' is set
            if (blobPath == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'blobPath' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlob");
            }


            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("connectionString", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(connectionString)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("containerName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(containerName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("blobPath", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(blobPath)); // header parameter

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanAzureBlob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CloudStorageVirusScanResult>("/virus/scan/cloud-storage/azure-blob/single", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanAzureBlob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Advanced Scan an Azure Blob for viruses Advanced Scan the contents of a single Azure Blob and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageAdvancedVirusScanResult</returns>
        public CloudStorageAdvancedVirusScanResult ScanCloudStorageScanAzureBlobAdvanced(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult> localVarResponse = ScanCloudStorageScanAzureBlobAdvancedWithHttpInfo(connectionString, containerName, blobPath, allowExecutables, allowInvalidFiles, allowScripts, allowPasswordProtectedFiles, allowMacros, allowXmlExternalEntities, allowInsecureDeserialization, allowHtml, allowUnsafeArchives, allowOleEmbeddedObject, allowUnwantedAction, options, restrictFileTypes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Scan an Azure Blob for viruses Advanced Scan the contents of a single Azure Blob and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageAdvancedVirusScanResult</returns>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanAzureBlobAdvancedWithHttpInfo(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'connectionString' is set
            if (connectionString == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'connectionString' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlobAdvanced");
            }

            // verify the required parameter 'containerName' is set
            if (containerName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'containerName' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlobAdvanced");
            }

            // verify the required parameter 'blobPath' is set
            if (blobPath == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'blobPath' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlobAdvanced");
            }

            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("connectionString", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(connectionString)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("containerName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(containerName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("blobPath", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(blobPath)); // header parameter
            if (allowExecutables != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowExecutables", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowExecutables)); // header parameter
            }
            if (allowInvalidFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInvalidFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInvalidFiles)); // header parameter
            }
            if (allowScripts != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowScripts", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowScripts)); // header parameter
            }
            if (allowPasswordProtectedFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowPasswordProtectedFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowPasswordProtectedFiles)); // header parameter
            }
            if (allowMacros != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowMacros", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowMacros)); // header parameter
            }
            if (allowXmlExternalEntities != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowXmlExternalEntities", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowXmlExternalEntities)); // header parameter
            }
            if (allowInsecureDeserialization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInsecureDeserialization", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInsecureDeserialization)); // header parameter
            }
            if (allowHtml != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowHtml", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowHtml)); // header parameter
            }
            if (allowUnsafeArchives != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnsafeArchives", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnsafeArchives)); // header parameter
            }
            if (allowOleEmbeddedObject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowOleEmbeddedObject", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowOleEmbeddedObject)); // header parameter
            }
            if (allowUnwantedAction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnwantedAction", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnwantedAction)); // header parameter
            }
            if (options != null)
            {
                localVarRequestOptions.HeaderParameters.Add("options", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(options)); // header parameter
            }
            if (restrictFileTypes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("restrictFileTypes", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(restrictFileTypes)); // header parameter
            }

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanAzureBlobAdvanced";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CloudStorageAdvancedVirusScanResult>("/virus/scan/cloud-storage/azure-blob/single/advanced", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanAzureBlobAdvanced", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Advanced Scan an Azure Blob for viruses Advanced Scan the contents of a single Azure Blob and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageAdvancedVirusScanResult</returns>
        public async System.Threading.Tasks.Task<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanAzureBlobAdvancedAsync(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult> localVarResponse = await ScanCloudStorageScanAzureBlobAdvancedWithHttpInfoAsync(connectionString, containerName, blobPath, allowExecutables, allowInvalidFiles, allowScripts, allowPasswordProtectedFiles, allowMacros, allowXmlExternalEntities, allowInsecureDeserialization, allowHtml, allowUnsafeArchives, allowOleEmbeddedObject, allowUnwantedAction, options, restrictFileTypes, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Scan an Azure Blob for viruses Advanced Scan the contents of a single Azure Blob and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageAdvancedVirusScanResult)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult>> ScanCloudStorageScanAzureBlobAdvancedWithHttpInfoAsync(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'connectionString' is set
            if (connectionString == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'connectionString' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlobAdvanced");
            }

            // verify the required parameter 'containerName' is set
            if (containerName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'containerName' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlobAdvanced");
            }

            // verify the required parameter 'blobPath' is set
            if (blobPath == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'blobPath' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlobAdvanced");
            }


            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("connectionString", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(connectionString)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("containerName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(containerName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("blobPath", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(blobPath)); // header parameter
            if (allowExecutables != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowExecutables", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowExecutables)); // header parameter
            }
            if (allowInvalidFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInvalidFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInvalidFiles)); // header parameter
            }
            if (allowScripts != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowScripts", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowScripts)); // header parameter
            }
            if (allowPasswordProtectedFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowPasswordProtectedFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowPasswordProtectedFiles)); // header parameter
            }
            if (allowMacros != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowMacros", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowMacros)); // header parameter
            }
            if (allowXmlExternalEntities != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowXmlExternalEntities", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowXmlExternalEntities)); // header parameter
            }
            if (allowInsecureDeserialization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInsecureDeserialization", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInsecureDeserialization)); // header parameter
            }
            if (allowHtml != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowHtml", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowHtml)); // header parameter
            }
            if (allowUnsafeArchives != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnsafeArchives", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnsafeArchives)); // header parameter
            }
            if (allowOleEmbeddedObject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowOleEmbeddedObject", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowOleEmbeddedObject)); // header parameter
            }
            if (allowUnwantedAction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnwantedAction", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnwantedAction)); // header parameter
            }
            if (options != null)
            {
                localVarRequestOptions.HeaderParameters.Add("options", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(options)); // header parameter
            }
            if (restrictFileTypes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("restrictFileTypes", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(restrictFileTypes)); // header parameter
            }

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanAzureBlobAdvanced";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CloudStorageAdvancedVirusScanResult>("/virus/scan/cloud-storage/azure-blob/single/advanced", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanAzureBlobAdvanced", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Advanced Scan an Azure Blob for viruses via a batch job Via a batch job, advanced Scan the contents of a single Azure Blob and its content for viruses and threats, great for larger/longer processing jobs.  Requires Managed Instance or Private Cloud.  Returns a job ID which you can then use the Get Job Status API to get the status and output of the job.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScanCloudStorageBatchJobCreateResult</returns>
        public ScanCloudStorageBatchJobCreateResult ScanCloudStorageScanAzureBlobAdvancedBatchJob(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<ScanCloudStorageBatchJobCreateResult> localVarResponse = ScanCloudStorageScanAzureBlobAdvancedBatchJobWithHttpInfo(connectionString, containerName, blobPath, allowExecutables, allowInvalidFiles, allowScripts, allowPasswordProtectedFiles, allowMacros, allowXmlExternalEntities, allowInsecureDeserialization, allowHtml, allowUnsafeArchives, allowOleEmbeddedObject, allowUnwantedAction, options, restrictFileTypes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Scan an Azure Blob for viruses via a batch job Via a batch job, advanced Scan the contents of a single Azure Blob and its content for viruses and threats, great for larger/longer processing jobs.  Requires Managed Instance or Private Cloud.  Returns a job ID which you can then use the Get Job Status API to get the status and output of the job.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScanCloudStorageBatchJobCreateResult</returns>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<ScanCloudStorageBatchJobCreateResult> ScanCloudStorageScanAzureBlobAdvancedBatchJobWithHttpInfo(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'connectionString' is set
            if (connectionString == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'connectionString' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlobAdvancedBatchJob");
            }

            // verify the required parameter 'containerName' is set
            if (containerName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'containerName' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlobAdvancedBatchJob");
            }

            // verify the required parameter 'blobPath' is set
            if (blobPath == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'blobPath' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlobAdvancedBatchJob");
            }

            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("connectionString", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(connectionString)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("containerName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(containerName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("blobPath", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(blobPath)); // header parameter
            if (allowExecutables != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowExecutables", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowExecutables)); // header parameter
            }
            if (allowInvalidFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInvalidFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInvalidFiles)); // header parameter
            }
            if (allowScripts != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowScripts", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowScripts)); // header parameter
            }
            if (allowPasswordProtectedFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowPasswordProtectedFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowPasswordProtectedFiles)); // header parameter
            }
            if (allowMacros != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowMacros", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowMacros)); // header parameter
            }
            if (allowXmlExternalEntities != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowXmlExternalEntities", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowXmlExternalEntities)); // header parameter
            }
            if (allowInsecureDeserialization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInsecureDeserialization", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInsecureDeserialization)); // header parameter
            }
            if (allowHtml != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowHtml", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowHtml)); // header parameter
            }
            if (allowUnsafeArchives != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnsafeArchives", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnsafeArchives)); // header parameter
            }
            if (allowOleEmbeddedObject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowOleEmbeddedObject", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowOleEmbeddedObject)); // header parameter
            }
            if (allowUnwantedAction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnwantedAction", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnwantedAction)); // header parameter
            }
            if (options != null)
            {
                localVarRequestOptions.HeaderParameters.Add("options", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(options)); // header parameter
            }
            if (restrictFileTypes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("restrictFileTypes", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(restrictFileTypes)); // header parameter
            }

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanAzureBlobAdvancedBatchJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ScanCloudStorageBatchJobCreateResult>("/virus/scan/cloud-storage/azure-blob/single/advanced/batch-job", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanAzureBlobAdvancedBatchJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Advanced Scan an Azure Blob for viruses via a batch job Via a batch job, advanced Scan the contents of a single Azure Blob and its content for viruses and threats, great for larger/longer processing jobs.  Requires Managed Instance or Private Cloud.  Returns a job ID which you can then use the Get Job Status API to get the status and output of the job.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScanCloudStorageBatchJobCreateResult</returns>
        public async System.Threading.Tasks.Task<ScanCloudStorageBatchJobCreateResult> ScanCloudStorageScanAzureBlobAdvancedBatchJobAsync(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<ScanCloudStorageBatchJobCreateResult> localVarResponse = await ScanCloudStorageScanAzureBlobAdvancedBatchJobWithHttpInfoAsync(connectionString, containerName, blobPath, allowExecutables, allowInvalidFiles, allowScripts, allowPasswordProtectedFiles, allowMacros, allowXmlExternalEntities, allowInsecureDeserialization, allowHtml, allowUnsafeArchives, allowOleEmbeddedObject, allowUnwantedAction, options, restrictFileTypes, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Scan an Azure Blob for viruses via a batch job Via a batch job, advanced Scan the contents of a single Azure Blob and its content for viruses and threats, great for larger/longer processing jobs.  Requires Managed Instance or Private Cloud.  Returns a job ID which you can then use the Get Job Status API to get the status and output of the job.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScanCloudStorageBatchJobCreateResult)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<ScanCloudStorageBatchJobCreateResult>> ScanCloudStorageScanAzureBlobAdvancedBatchJobWithHttpInfoAsync(string connectionString, string containerName, string blobPath, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'connectionString' is set
            if (connectionString == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'connectionString' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlobAdvancedBatchJob");
            }

            // verify the required parameter 'containerName' is set
            if (containerName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'containerName' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlobAdvancedBatchJob");
            }

            // verify the required parameter 'blobPath' is set
            if (blobPath == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'blobPath' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlobAdvancedBatchJob");
            }


            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("connectionString", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(connectionString)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("containerName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(containerName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("blobPath", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(blobPath)); // header parameter
            if (allowExecutables != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowExecutables", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowExecutables)); // header parameter
            }
            if (allowInvalidFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInvalidFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInvalidFiles)); // header parameter
            }
            if (allowScripts != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowScripts", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowScripts)); // header parameter
            }
            if (allowPasswordProtectedFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowPasswordProtectedFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowPasswordProtectedFiles)); // header parameter
            }
            if (allowMacros != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowMacros", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowMacros)); // header parameter
            }
            if (allowXmlExternalEntities != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowXmlExternalEntities", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowXmlExternalEntities)); // header parameter
            }
            if (allowInsecureDeserialization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInsecureDeserialization", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInsecureDeserialization)); // header parameter
            }
            if (allowHtml != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowHtml", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowHtml)); // header parameter
            }
            if (allowUnsafeArchives != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnsafeArchives", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnsafeArchives)); // header parameter
            }
            if (allowOleEmbeddedObject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowOleEmbeddedObject", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowOleEmbeddedObject)); // header parameter
            }
            if (allowUnwantedAction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnwantedAction", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnwantedAction)); // header parameter
            }
            if (options != null)
            {
                localVarRequestOptions.HeaderParameters.Add("options", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(options)); // header parameter
            }
            if (restrictFileTypes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("restrictFileTypes", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(restrictFileTypes)); // header parameter
            }

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanAzureBlobAdvancedBatchJob";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ScanCloudStorageBatchJobCreateResult>("/virus/scan/cloud-storage/azure-blob/single/advanced/batch-job", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanAzureBlobAdvancedBatchJob", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        public CloudStorageVirusScanResult ScanCloudStorageScanGcpStorageFile(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult> localVarResponse = ScanCloudStorageScanGcpStorageFileWithHttpInfo(bucketName, objectName, jsonCredentialFile);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult> ScanCloudStorageScanGcpStorageFileWithHttpInfo(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, int operationIndex = 0)
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'bucketName' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFile");
            }

            // verify the required parameter 'objectName' is set
            if (objectName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'objectName' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFile");
            }

            // verify the required parameter 'jsonCredentialFile' is set
            if (jsonCredentialFile == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'jsonCredentialFile' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFile");
            }

            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("bucketName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(bucketName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("objectName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(objectName)); // header parameter
            localVarRequestOptions.FileParameters.Add("jsonCredentialFile", jsonCredentialFile);

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanGcpStorageFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CloudStorageVirusScanResult>("/virus/scan/cloud-storage/gcp-storage/single", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanGcpStorageFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        public async System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanGcpStorageFileAsync(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult> localVarResponse = await ScanCloudStorageScanGcpStorageFileWithHttpInfoAsync(bucketName, objectName, jsonCredentialFile, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanGcpStorageFileWithHttpInfoAsync(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'bucketName' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFile");
            }

            // verify the required parameter 'objectName' is set
            if (objectName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'objectName' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFile");
            }

            // verify the required parameter 'jsonCredentialFile' is set
            if (jsonCredentialFile == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'jsonCredentialFile' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFile");
            }


            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("bucketName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(bucketName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("objectName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(objectName)); // header parameter
            localVarRequestOptions.FileParameters.Add("jsonCredentialFile", jsonCredentialFile);

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanGcpStorageFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CloudStorageVirusScanResult>("/virus/scan/cloud-storage/gcp-storage/single", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanGcpStorageFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Advanced Scan an Google Cloud Platform (GCP) Storage file for viruses Advanced Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageAdvancedVirusScanResult</returns>
        public CloudStorageAdvancedVirusScanResult ScanCloudStorageScanGcpStorageFileAdvanced(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult> localVarResponse = ScanCloudStorageScanGcpStorageFileAdvancedWithHttpInfo(bucketName, objectName, jsonCredentialFile, allowExecutables, allowInvalidFiles, allowScripts, allowPasswordProtectedFiles, allowMacros, allowXmlExternalEntities, allowInsecureDeserialization, allowHtml, allowUnsafeArchives, allowOleEmbeddedObject, allowUnwantedAction, options, restrictFileTypes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Scan an Google Cloud Platform (GCP) Storage file for viruses Advanced Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageAdvancedVirusScanResult</returns>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanGcpStorageFileAdvancedWithHttpInfo(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'bucketName' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFileAdvanced");
            }

            // verify the required parameter 'objectName' is set
            if (objectName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'objectName' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFileAdvanced");
            }

            // verify the required parameter 'jsonCredentialFile' is set
            if (jsonCredentialFile == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'jsonCredentialFile' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFileAdvanced");
            }

            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("bucketName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(bucketName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("objectName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(objectName)); // header parameter
            if (allowExecutables != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowExecutables", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowExecutables)); // header parameter
            }
            if (allowInvalidFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInvalidFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInvalidFiles)); // header parameter
            }
            if (allowScripts != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowScripts", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowScripts)); // header parameter
            }
            if (allowPasswordProtectedFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowPasswordProtectedFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowPasswordProtectedFiles)); // header parameter
            }
            if (allowMacros != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowMacros", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowMacros)); // header parameter
            }
            if (allowXmlExternalEntities != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowXmlExternalEntities", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowXmlExternalEntities)); // header parameter
            }
            if (allowInsecureDeserialization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInsecureDeserialization", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInsecureDeserialization)); // header parameter
            }
            if (allowHtml != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowHtml", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowHtml)); // header parameter
            }
            if (allowUnsafeArchives != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnsafeArchives", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnsafeArchives)); // header parameter
            }
            if (allowOleEmbeddedObject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowOleEmbeddedObject", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowOleEmbeddedObject)); // header parameter
            }
            if (allowUnwantedAction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnwantedAction", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnwantedAction)); // header parameter
            }
            if (options != null)
            {
                localVarRequestOptions.HeaderParameters.Add("options", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(options)); // header parameter
            }
            if (restrictFileTypes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("restrictFileTypes", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(restrictFileTypes)); // header parameter
            }
            localVarRequestOptions.FileParameters.Add("jsonCredentialFile", jsonCredentialFile);

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanGcpStorageFileAdvanced";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CloudStorageAdvancedVirusScanResult>("/virus/scan/cloud-storage/gcp-storage/single/advanced", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanGcpStorageFileAdvanced", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Advanced Scan an Google Cloud Platform (GCP) Storage file for viruses Advanced Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageAdvancedVirusScanResult</returns>
        public async System.Threading.Tasks.Task<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanGcpStorageFileAdvancedAsync(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult> localVarResponse = await ScanCloudStorageScanGcpStorageFileAdvancedWithHttpInfoAsync(bucketName, objectName, jsonCredentialFile, allowExecutables, allowInvalidFiles, allowScripts, allowPasswordProtectedFiles, allowMacros, allowXmlExternalEntities, allowInsecureDeserialization, allowHtml, allowUnsafeArchives, allowOleEmbeddedObject, allowUnwantedAction, options, restrictFileTypes, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Scan an Google Cloud Platform (GCP) Storage file for viruses Advanced Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageAdvancedVirusScanResult)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult>> ScanCloudStorageScanGcpStorageFileAdvancedWithHttpInfoAsync(string bucketName, string objectName, System.IO.Stream jsonCredentialFile, bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'bucketName' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFileAdvanced");
            }

            // verify the required parameter 'objectName' is set
            if (objectName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'objectName' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFileAdvanced");
            }

            // verify the required parameter 'jsonCredentialFile' is set
            if (jsonCredentialFile == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'jsonCredentialFile' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFileAdvanced");
            }


            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("bucketName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(bucketName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("objectName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(objectName)); // header parameter
            if (allowExecutables != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowExecutables", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowExecutables)); // header parameter
            }
            if (allowInvalidFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInvalidFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInvalidFiles)); // header parameter
            }
            if (allowScripts != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowScripts", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowScripts)); // header parameter
            }
            if (allowPasswordProtectedFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowPasswordProtectedFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowPasswordProtectedFiles)); // header parameter
            }
            if (allowMacros != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowMacros", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowMacros)); // header parameter
            }
            if (allowXmlExternalEntities != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowXmlExternalEntities", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowXmlExternalEntities)); // header parameter
            }
            if (allowInsecureDeserialization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInsecureDeserialization", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInsecureDeserialization)); // header parameter
            }
            if (allowHtml != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowHtml", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowHtml)); // header parameter
            }
            if (allowUnsafeArchives != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnsafeArchives", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnsafeArchives)); // header parameter
            }
            if (allowOleEmbeddedObject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowOleEmbeddedObject", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowOleEmbeddedObject)); // header parameter
            }
            if (allowUnwantedAction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnwantedAction", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnwantedAction)); // header parameter
            }
            if (options != null)
            {
                localVarRequestOptions.HeaderParameters.Add("options", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(options)); // header parameter
            }
            if (restrictFileTypes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("restrictFileTypes", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(restrictFileTypes)); // header parameter
            }
            localVarRequestOptions.FileParameters.Add("jsonCredentialFile", jsonCredentialFile);

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanGcpStorageFileAdvanced";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CloudStorageAdvancedVirusScanResult>("/virus/scan/cloud-storage/gcp-storage/single/advanced", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanGcpStorageFileAdvanced", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Virus Scan a file in a SharePoint Online Site Drive Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        public CloudStorageVirusScanResult ScanCloudStorageScanSharePointOnlineFile(string clientID, string clientSecret, string sharepointDomainName, string siteID, string filePath, string tenantID = default(string), string itemID = default(string), int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult> localVarResponse = ScanCloudStorageScanSharePointOnlineFileWithHttpInfo(clientID, clientSecret, sharepointDomainName, siteID, filePath, tenantID, itemID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Virus Scan a file in a SharePoint Online Site Drive Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult> ScanCloudStorageScanSharePointOnlineFileWithHttpInfo(string clientID, string clientSecret, string sharepointDomainName, string siteID, string filePath, string tenantID = default(string), string itemID = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'clientID' is set
            if (clientID == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'clientID' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFile");
            }

            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'clientSecret' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFile");
            }

            // verify the required parameter 'sharepointDomainName' is set
            if (sharepointDomainName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'sharepointDomainName' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFile");
            }

            // verify the required parameter 'siteID' is set
            if (siteID == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'siteID' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFile");
            }

            // verify the required parameter 'filePath' is set
            if (filePath == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'filePath' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFile");
            }

            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("clientID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(clientID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("clientSecret", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(clientSecret)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("sharepointDomainName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(sharepointDomainName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("siteID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(siteID)); // header parameter
            if (tenantID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("tenantID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(tenantID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("filePath", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(filePath)); // header parameter
            if (itemID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("itemID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(itemID)); // header parameter
            }

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanSharePointOnlineFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CloudStorageVirusScanResult>("/virus/scan/cloud-storage/sharepoint-online/site/single", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanSharePointOnlineFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Virus Scan a file in a SharePoint Online Site Drive Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        public async System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanSharePointOnlineFileAsync(string clientID, string clientSecret, string sharepointDomainName, string siteID, string filePath, string tenantID = default(string), string itemID = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult> localVarResponse = await ScanCloudStorageScanSharePointOnlineFileWithHttpInfoAsync(clientID, clientSecret, sharepointDomainName, siteID, filePath, tenantID, itemID, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Virus Scan a file in a SharePoint Online Site Drive Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;.</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanSharePointOnlineFileWithHttpInfoAsync(string clientID, string clientSecret, string sharepointDomainName, string siteID, string filePath, string tenantID = default(string), string itemID = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientID' is set
            if (clientID == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'clientID' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFile");
            }

            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'clientSecret' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFile");
            }

            // verify the required parameter 'sharepointDomainName' is set
            if (sharepointDomainName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'sharepointDomainName' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFile");
            }

            // verify the required parameter 'siteID' is set
            if (siteID == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'siteID' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFile");
            }

            // verify the required parameter 'filePath' is set
            if (filePath == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'filePath' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFile");
            }


            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("clientID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(clientID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("clientSecret", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(clientSecret)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("sharepointDomainName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(sharepointDomainName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("siteID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(siteID)); // header parameter
            if (tenantID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("tenantID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(tenantID)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("filePath", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(filePath)); // header parameter
            if (itemID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("itemID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(itemID)); // header parameter
            }

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanSharePointOnlineFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CloudStorageVirusScanResult>("/virus/scan/cloud-storage/sharepoint-online/site/single", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanSharePointOnlineFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Advanced Virus Scan a file in a SharePoint Online Site Drive Advanced Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudStorageAdvancedVirusScanResult</returns>
        public CloudStorageAdvancedVirusScanResult ScanCloudStorageScanSharePointOnlineFileAdvanced(string clientID, string clientSecret, string sharepointDomainName, string siteID, string tenantID = default(string), string filePath = default(string), string itemID = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string restrictFileTypes = default(string), int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult> localVarResponse = ScanCloudStorageScanSharePointOnlineFileAdvancedWithHttpInfo(clientID, clientSecret, sharepointDomainName, siteID, tenantID, filePath, itemID, allowExecutables, allowInvalidFiles, allowScripts, allowPasswordProtectedFiles, allowMacros, allowXmlExternalEntities, allowInsecureDeserialization, allowHtml, allowUnsafeArchives, allowOleEmbeddedObject, allowUnwantedAction, restrictFileTypes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Virus Scan a file in a SharePoint Online Site Drive Advanced Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudStorageAdvancedVirusScanResult</returns>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanSharePointOnlineFileAdvancedWithHttpInfo(string clientID, string clientSecret, string sharepointDomainName, string siteID, string tenantID = default(string), string filePath = default(string), string itemID = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string restrictFileTypes = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'clientID' is set
            if (clientID == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'clientID' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFileAdvanced");
            }

            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'clientSecret' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFileAdvanced");
            }

            // verify the required parameter 'sharepointDomainName' is set
            if (sharepointDomainName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'sharepointDomainName' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFileAdvanced");
            }

            // verify the required parameter 'siteID' is set
            if (siteID == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'siteID' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFileAdvanced");
            }

            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("clientID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(clientID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("clientSecret", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(clientSecret)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("sharepointDomainName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(sharepointDomainName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("siteID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(siteID)); // header parameter
            if (tenantID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("tenantID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(tenantID)); // header parameter
            }
            if (filePath != null)
            {
                localVarRequestOptions.HeaderParameters.Add("filePath", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(filePath)); // header parameter
            }
            if (itemID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("itemID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(itemID)); // header parameter
            }
            if (allowExecutables != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowExecutables", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowExecutables)); // header parameter
            }
            if (allowInvalidFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInvalidFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInvalidFiles)); // header parameter
            }
            if (allowScripts != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowScripts", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowScripts)); // header parameter
            }
            if (allowPasswordProtectedFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowPasswordProtectedFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowPasswordProtectedFiles)); // header parameter
            }
            if (allowMacros != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowMacros", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowMacros)); // header parameter
            }
            if (allowXmlExternalEntities != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowXmlExternalEntities", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowXmlExternalEntities)); // header parameter
            }
            if (allowInsecureDeserialization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInsecureDeserialization", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInsecureDeserialization)); // header parameter
            }
            if (allowHtml != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowHtml", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowHtml)); // header parameter
            }
            if (allowUnsafeArchives != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnsafeArchives", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnsafeArchives)); // header parameter
            }
            if (allowOleEmbeddedObject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowOleEmbeddedObject", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowOleEmbeddedObject)); // header parameter
            }
            if (allowUnwantedAction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnwantedAction", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnwantedAction)); // header parameter
            }
            if (restrictFileTypes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("restrictFileTypes", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(restrictFileTypes)); // header parameter
            }

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanSharePointOnlineFileAdvanced";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CloudStorageAdvancedVirusScanResult>("/virus/scan/cloud-storage/sharepoint-online/site/advanced", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanSharePointOnlineFileAdvanced", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Advanced Virus Scan a file in a SharePoint Online Site Drive Advanced Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudStorageAdvancedVirusScanResult</returns>
        public async System.Threading.Tasks.Task<CloudStorageAdvancedVirusScanResult> ScanCloudStorageScanSharePointOnlineFileAdvancedAsync(string clientID, string clientSecret, string sharepointDomainName, string siteID, string tenantID = default(string), string filePath = default(string), string itemID = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult> localVarResponse = await ScanCloudStorageScanSharePointOnlineFileAdvancedWithHttpInfoAsync(clientID, clientSecret, sharepointDomainName, siteID, tenantID, filePath, itemID, allowExecutables, allowInvalidFiles, allowScripts, allowPasswordProtectedFiles, allowMacros, allowXmlExternalEntities, allowInsecureDeserialization, allowHtml, allowUnsafeArchives, allowOleEmbeddedObject, allowUnwantedAction, restrictFileTypes, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Virus Scan a file in a SharePoint Online Site Drive Advanced Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.</param>
        /// <param name="clientSecret">Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal</param>
        /// <param name="sharepointDomainName">SharePoint Online domain name, such as mydomain.sharepoint.com</param>
        /// <param name="siteID">Site ID (GUID) of the SharePoint site you wish to retrieve the file from</param>
        /// <param name="tenantID">Optional; Tenant ID of your Azure Active Directory (optional)</param>
        /// <param name="filePath">Path to the file within the drive, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with &#39;base64:&#39;, such as: &#39;base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV&#39;. (optional)</param>
        /// <param name="itemID">SharePoint itemID, such as a DriveItem Id (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability]. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudStorageAdvancedVirusScanResult)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<CloudStorageAdvancedVirusScanResult>> ScanCloudStorageScanSharePointOnlineFileAdvancedWithHttpInfoAsync(string clientID, string clientSecret, string sharepointDomainName, string siteID, string tenantID = default(string), string filePath = default(string), string itemID = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientID' is set
            if (clientID == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'clientID' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFileAdvanced");
            }

            // verify the required parameter 'clientSecret' is set
            if (clientSecret == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'clientSecret' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFileAdvanced");
            }

            // verify the required parameter 'sharepointDomainName' is set
            if (sharepointDomainName == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'sharepointDomainName' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFileAdvanced");
            }

            // verify the required parameter 'siteID' is set
            if (siteID == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'siteID' when calling ScanCloudStorageApi->ScanCloudStorageScanSharePointOnlineFileAdvanced");
            }


            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("clientID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(clientID)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("clientSecret", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(clientSecret)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("sharepointDomainName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(sharepointDomainName)); // header parameter
            localVarRequestOptions.HeaderParameters.Add("siteID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(siteID)); // header parameter
            if (tenantID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("tenantID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(tenantID)); // header parameter
            }
            if (filePath != null)
            {
                localVarRequestOptions.HeaderParameters.Add("filePath", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(filePath)); // header parameter
            }
            if (itemID != null)
            {
                localVarRequestOptions.HeaderParameters.Add("itemID", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(itemID)); // header parameter
            }
            if (allowExecutables != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowExecutables", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowExecutables)); // header parameter
            }
            if (allowInvalidFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInvalidFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInvalidFiles)); // header parameter
            }
            if (allowScripts != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowScripts", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowScripts)); // header parameter
            }
            if (allowPasswordProtectedFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowPasswordProtectedFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowPasswordProtectedFiles)); // header parameter
            }
            if (allowMacros != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowMacros", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowMacros)); // header parameter
            }
            if (allowXmlExternalEntities != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowXmlExternalEntities", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowXmlExternalEntities)); // header parameter
            }
            if (allowInsecureDeserialization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInsecureDeserialization", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInsecureDeserialization)); // header parameter
            }
            if (allowHtml != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowHtml", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowHtml)); // header parameter
            }
            if (allowUnsafeArchives != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnsafeArchives", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnsafeArchives)); // header parameter
            }
            if (allowOleEmbeddedObject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowOleEmbeddedObject", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowOleEmbeddedObject)); // header parameter
            }
            if (allowUnwantedAction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnwantedAction", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnwantedAction)); // header parameter
            }
            if (restrictFileTypes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("restrictFileTypes", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(restrictFileTypes)); // header parameter
            }

            localVarRequestOptions.Operation = "ScanCloudStorageApi.ScanCloudStorageScanSharePointOnlineFileAdvanced";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CloudStorageAdvancedVirusScanResult>("/virus/scan/cloud-storage/sharepoint-online/site/advanced", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanCloudStorageScanSharePointOnlineFileAdvanced", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
