/* 
 * virusapi
 *
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.VirusScan.Client;
using Cloudmersive.APIClient.NET.VirusScan.Model;

namespace Cloudmersive.APIClient.NET.VirusScan.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScanCloudStorageApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Scan an AWS S3 file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        CloudStorageVirusScanResult ScanCloudStorageScanAwsS3File (string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName);

        /// <summary>
        /// Scan an AWS S3 file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        ApiResponse<CloudStorageVirusScanResult> ScanCloudStorageScanAwsS3FileWithHttpInfo (string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName);
        /// <summary>
        /// Scan an Azure Blob for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        CloudStorageVirusScanResult ScanCloudStorageScanAzureBlob (string connectionString, string containerName, string blobPath);

        /// <summary>
        /// Scan an Azure Blob for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        ApiResponse<CloudStorageVirusScanResult> ScanCloudStorageScanAzureBlobWithHttpInfo (string connectionString, string containerName, string blobPath);
        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        CloudStorageVirusScanResult ScanCloudStorageScanGcpStorageFile (string bucketName, string objectName, System.IO.Stream jsonCredentialFile);

        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        ApiResponse<CloudStorageVirusScanResult> ScanCloudStorageScanGcpStorageFileWithHttpInfo (string bucketName, string objectName, System.IO.Stream jsonCredentialFile);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Scan an AWS S3 file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanAwsS3FileAsync (string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName);

        /// <summary>
        /// Scan an AWS S3 file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanAwsS3FileAsyncWithHttpInfo (string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName);
        /// <summary>
        /// Scan an Azure Blob for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanAzureBlobAsync (string connectionString, string containerName, string blobPath);

        /// <summary>
        /// Scan an Azure Blob for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanAzureBlobAsyncWithHttpInfo (string connectionString, string containerName, string blobPath);
        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanGcpStorageFileAsync (string bucketName, string objectName, System.IO.Stream jsonCredentialFile);

        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses
        /// </summary>
        /// <remarks>
        /// Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanGcpStorageFileAsyncWithHttpInfo (string bucketName, string objectName, System.IO.Stream jsonCredentialFile);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScanCloudStorageApi : IScanCloudStorageApi
    {
        private Cloudmersive.APIClient.NET.VirusScan.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanCloudStorageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScanCloudStorageApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.VirusScan.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.VirusScan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanCloudStorageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScanCloudStorageApi(Cloudmersive.APIClient.NET.VirusScan.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.VirusScan.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.VirusScan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.VirusScan.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Scan an AWS S3 file for viruses Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        public CloudStorageVirusScanResult ScanCloudStorageScanAwsS3File (string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName)
        {
             ApiResponse<CloudStorageVirusScanResult> localVarResponse = ScanCloudStorageScanAwsS3FileWithHttpInfo(accessKey, secretKey, bucketRegion, bucketName, keyName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Scan an AWS S3 file for viruses Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        public ApiResponse< CloudStorageVirusScanResult > ScanCloudStorageScanAwsS3FileWithHttpInfo (string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName)
        {
            // verify the required parameter 'accessKey' is set
            if (accessKey == null)
                throw new ApiException(400, "Missing required parameter 'accessKey' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            // verify the required parameter 'secretKey' is set
            if (secretKey == null)
                throw new ApiException(400, "Missing required parameter 'secretKey' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            // verify the required parameter 'bucketRegion' is set
            if (bucketRegion == null)
                throw new ApiException(400, "Missing required parameter 'bucketRegion' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
                throw new ApiException(400, "Missing required parameter 'bucketName' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");

            var localVarPath = "/virus/scan/cloud-storage/aws-s3/single";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessKey != null) localVarHeaderParams.Add("accessKey", this.Configuration.ApiClient.ParameterToString(accessKey)); // header parameter
            if (secretKey != null) localVarHeaderParams.Add("secretKey", this.Configuration.ApiClient.ParameterToString(secretKey)); // header parameter
            if (bucketRegion != null) localVarHeaderParams.Add("bucketRegion", this.Configuration.ApiClient.ParameterToString(bucketRegion)); // header parameter
            if (bucketName != null) localVarHeaderParams.Add("bucketName", this.Configuration.ApiClient.ParameterToString(bucketName)); // header parameter
            if (keyName != null) localVarHeaderParams.Add("keyName", this.Configuration.ApiClient.ParameterToString(keyName)); // header parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScanCloudStorageScanAwsS3File", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageVirusScanResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageVirusScanResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageVirusScanResult)));
        }

        /// <summary>
        /// Scan an AWS S3 file for viruses Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        public async System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanAwsS3FileAsync (string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName)
        {
             ApiResponse<CloudStorageVirusScanResult> localVarResponse = await ScanCloudStorageScanAwsS3FileAsyncWithHttpInfo(accessKey, secretKey, bucketRegion, bucketName, keyName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Scan an AWS S3 file for viruses Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accessKey">AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="secretKey">AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console</param>
        /// <param name="bucketRegion">Name of the region of the S3 bucket, such as &#39;US-East-1&#39;</param>
        /// <param name="bucketName">Name of the S3 bucket</param>
        /// <param name="keyName">Key name (also called file name) of the file in S3 that you wish to scan for viruses</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanAwsS3FileAsyncWithHttpInfo (string accessKey, string secretKey, string bucketRegion, string bucketName, string keyName)
        {
            // verify the required parameter 'accessKey' is set
            if (accessKey == null)
                throw new ApiException(400, "Missing required parameter 'accessKey' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            // verify the required parameter 'secretKey' is set
            if (secretKey == null)
                throw new ApiException(400, "Missing required parameter 'secretKey' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            // verify the required parameter 'bucketRegion' is set
            if (bucketRegion == null)
                throw new ApiException(400, "Missing required parameter 'bucketRegion' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
                throw new ApiException(400, "Missing required parameter 'bucketName' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");
            // verify the required parameter 'keyName' is set
            if (keyName == null)
                throw new ApiException(400, "Missing required parameter 'keyName' when calling ScanCloudStorageApi->ScanCloudStorageScanAwsS3File");

            var localVarPath = "/virus/scan/cloud-storage/aws-s3/single";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (accessKey != null) localVarHeaderParams.Add("accessKey", this.Configuration.ApiClient.ParameterToString(accessKey)); // header parameter
            if (secretKey != null) localVarHeaderParams.Add("secretKey", this.Configuration.ApiClient.ParameterToString(secretKey)); // header parameter
            if (bucketRegion != null) localVarHeaderParams.Add("bucketRegion", this.Configuration.ApiClient.ParameterToString(bucketRegion)); // header parameter
            if (bucketName != null) localVarHeaderParams.Add("bucketName", this.Configuration.ApiClient.ParameterToString(bucketName)); // header parameter
            if (keyName != null) localVarHeaderParams.Add("keyName", this.Configuration.ApiClient.ParameterToString(keyName)); // header parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScanCloudStorageScanAwsS3File", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageVirusScanResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageVirusScanResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageVirusScanResult)));
        }

        /// <summary>
        /// Scan an Azure Blob for viruses Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        public CloudStorageVirusScanResult ScanCloudStorageScanAzureBlob (string connectionString, string containerName, string blobPath)
        {
             ApiResponse<CloudStorageVirusScanResult> localVarResponse = ScanCloudStorageScanAzureBlobWithHttpInfo(connectionString, containerName, blobPath);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Scan an Azure Blob for viruses Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        public ApiResponse< CloudStorageVirusScanResult > ScanCloudStorageScanAzureBlobWithHttpInfo (string connectionString, string containerName, string blobPath)
        {
            // verify the required parameter 'connectionString' is set
            if (connectionString == null)
                throw new ApiException(400, "Missing required parameter 'connectionString' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlob");
            // verify the required parameter 'containerName' is set
            if (containerName == null)
                throw new ApiException(400, "Missing required parameter 'containerName' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlob");
            // verify the required parameter 'blobPath' is set
            if (blobPath == null)
                throw new ApiException(400, "Missing required parameter 'blobPath' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlob");

            var localVarPath = "/virus/scan/cloud-storage/azure-blob/single";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectionString != null) localVarHeaderParams.Add("connectionString", this.Configuration.ApiClient.ParameterToString(connectionString)); // header parameter
            if (containerName != null) localVarHeaderParams.Add("containerName", this.Configuration.ApiClient.ParameterToString(containerName)); // header parameter
            if (blobPath != null) localVarHeaderParams.Add("blobPath", this.Configuration.ApiClient.ParameterToString(blobPath)); // header parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScanCloudStorageScanAzureBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageVirusScanResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageVirusScanResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageVirusScanResult)));
        }

        /// <summary>
        /// Scan an Azure Blob for viruses Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        public async System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanAzureBlobAsync (string connectionString, string containerName, string blobPath)
        {
             ApiResponse<CloudStorageVirusScanResult> localVarResponse = await ScanCloudStorageScanAzureBlobAsyncWithHttpInfo(connectionString, containerName, blobPath);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Scan an Azure Blob for viruses Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionString">Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.</param>
        /// <param name="containerName">Name of the Blob container within the Azure Blob Storage account</param>
        /// <param name="blobPath">Path to the blob within the container, such as &#39;hello.pdf&#39; or &#39;/folder/subfolder/world.pdf&#39;</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanAzureBlobAsyncWithHttpInfo (string connectionString, string containerName, string blobPath)
        {
            // verify the required parameter 'connectionString' is set
            if (connectionString == null)
                throw new ApiException(400, "Missing required parameter 'connectionString' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlob");
            // verify the required parameter 'containerName' is set
            if (containerName == null)
                throw new ApiException(400, "Missing required parameter 'containerName' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlob");
            // verify the required parameter 'blobPath' is set
            if (blobPath == null)
                throw new ApiException(400, "Missing required parameter 'blobPath' when calling ScanCloudStorageApi->ScanCloudStorageScanAzureBlob");

            var localVarPath = "/virus/scan/cloud-storage/azure-blob/single";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (connectionString != null) localVarHeaderParams.Add("connectionString", this.Configuration.ApiClient.ParameterToString(connectionString)); // header parameter
            if (containerName != null) localVarHeaderParams.Add("containerName", this.Configuration.ApiClient.ParameterToString(containerName)); // header parameter
            if (blobPath != null) localVarHeaderParams.Add("blobPath", this.Configuration.ApiClient.ParameterToString(blobPath)); // header parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScanCloudStorageScanAzureBlob", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageVirusScanResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageVirusScanResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageVirusScanResult)));
        }

        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <returns>CloudStorageVirusScanResult</returns>
        public CloudStorageVirusScanResult ScanCloudStorageScanGcpStorageFile (string bucketName, string objectName, System.IO.Stream jsonCredentialFile)
        {
             ApiResponse<CloudStorageVirusScanResult> localVarResponse = ScanCloudStorageScanGcpStorageFileWithHttpInfo(bucketName, objectName, jsonCredentialFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <returns>ApiResponse of CloudStorageVirusScanResult</returns>
        public ApiResponse< CloudStorageVirusScanResult > ScanCloudStorageScanGcpStorageFileWithHttpInfo (string bucketName, string objectName, System.IO.Stream jsonCredentialFile)
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
                throw new ApiException(400, "Missing required parameter 'bucketName' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFile");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFile");
            // verify the required parameter 'jsonCredentialFile' is set
            if (jsonCredentialFile == null)
                throw new ApiException(400, "Missing required parameter 'jsonCredentialFile' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFile");

            var localVarPath = "/virus/scan/cloud-storage/gcp-storage/single";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketName != null) localVarHeaderParams.Add("bucketName", this.Configuration.ApiClient.ParameterToString(bucketName)); // header parameter
            if (objectName != null) localVarHeaderParams.Add("objectName", this.Configuration.ApiClient.ParameterToString(objectName)); // header parameter
            if (jsonCredentialFile != null) localVarFileParams.Add("jsonCredentialFile", this.Configuration.ApiClient.ParameterToFile("jsonCredentialFile", jsonCredentialFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScanCloudStorageScanGcpStorageFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageVirusScanResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageVirusScanResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageVirusScanResult)));
        }

        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <returns>Task of CloudStorageVirusScanResult</returns>
        public async System.Threading.Tasks.Task<CloudStorageVirusScanResult> ScanCloudStorageScanGcpStorageFileAsync (string bucketName, string objectName, System.IO.Stream jsonCredentialFile)
        {
             ApiResponse<CloudStorageVirusScanResult> localVarResponse = await ScanCloudStorageScanGcpStorageFileAsyncWithHttpInfo(bucketName, objectName, jsonCredentialFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Scan an Google Cloud Platform (GCP) Storage file for viruses Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName">Name of the bucket in Google Cloud Storage</param>
        /// <param name="objectName">Name of the object or file in Google Cloud Storage</param>
        /// <param name="jsonCredentialFile">Service Account credential for Google Cloud stored in a JSON file.</param>
        /// <returns>Task of ApiResponse (CloudStorageVirusScanResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudStorageVirusScanResult>> ScanCloudStorageScanGcpStorageFileAsyncWithHttpInfo (string bucketName, string objectName, System.IO.Stream jsonCredentialFile)
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
                throw new ApiException(400, "Missing required parameter 'bucketName' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFile");
            // verify the required parameter 'objectName' is set
            if (objectName == null)
                throw new ApiException(400, "Missing required parameter 'objectName' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFile");
            // verify the required parameter 'jsonCredentialFile' is set
            if (jsonCredentialFile == null)
                throw new ApiException(400, "Missing required parameter 'jsonCredentialFile' when calling ScanCloudStorageApi->ScanCloudStorageScanGcpStorageFile");

            var localVarPath = "/virus/scan/cloud-storage/gcp-storage/single";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (bucketName != null) localVarHeaderParams.Add("bucketName", this.Configuration.ApiClient.ParameterToString(bucketName)); // header parameter
            if (objectName != null) localVarHeaderParams.Add("objectName", this.Configuration.ApiClient.ParameterToString(objectName)); // header parameter
            if (jsonCredentialFile != null) localVarFileParams.Add("jsonCredentialFile", this.Configuration.ApiClient.ParameterToFile("jsonCredentialFile", jsonCredentialFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ScanCloudStorageScanGcpStorageFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudStorageVirusScanResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudStorageVirusScanResult) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudStorageVirusScanResult)));
        }

    }
}
