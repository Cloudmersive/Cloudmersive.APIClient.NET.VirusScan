/*
 * virusapi
 *
 * The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Cloudmersive.APIClient.NET.VirusScan.Client;
using Cloudmersive.APIClient.NET.VirusScan.Model;

namespace Cloudmersive.APIClient.NET.VirusScan.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScanApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Scan a file for viruses
        /// </summary>
        /// <remarks>
        /// Scan files and content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VirusScanResult</returns>
        VirusScanResult ScanFile(System.IO.Stream inputFile, int operationIndex = 0);

        /// <summary>
        /// Scan a file for viruses
        /// </summary>
        /// <remarks>
        /// Scan files and content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VirusScanResult</returns>
        ApiResponse<VirusScanResult> ScanFileWithHttpInfo(System.IO.Stream inputFile, int operationIndex = 0);
        /// <summary>
        /// Advanced Scan a file for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash, MSG, and a wide range of image file formats.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileName">Optional: specify the original file name of the file being scanned.  By default the file name is taken from inputFile parameter, but if this is not provided, or you wish to override it, you can specify the original file name using this parameter. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, BAT scripts, JS scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros (including support for .DOCX, .XLSX, .PPTX, .DOC and .XLS), and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].  If set to true, HTML files containing script tags will be allowed, but ContainsScript will be set to true if script tags are present. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include permitJavascriptInHtml to allow JavaScript in HTML files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include blockInvalidUris to block invalid URIs in Office documents.  Include permitAuthenticodeSignedExecutables to allow executables if they have a valid Authenticode signature.  Include scanMultipartFile to scan multi-part files such as split zip files.  Include ignoreRestrictFileTypesForAttachments to ignore restrictFileTypes setting for file attachments.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VirusScanAdvancedResult</returns>
        VirusScanAdvancedResult ScanFileAdvanced(System.IO.Stream inputFile, string fileName = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0);

        /// <summary>
        /// Advanced Scan a file for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash, MSG, and a wide range of image file formats.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileName">Optional: specify the original file name of the file being scanned.  By default the file name is taken from inputFile parameter, but if this is not provided, or you wish to override it, you can specify the original file name using this parameter. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, BAT scripts, JS scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros (including support for .DOCX, .XLSX, .PPTX, .DOC and .XLS), and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].  If set to true, HTML files containing script tags will be allowed, but ContainsScript will be set to true if script tags are present. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include permitJavascriptInHtml to allow JavaScript in HTML files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include blockInvalidUris to block invalid URIs in Office documents.  Include permitAuthenticodeSignedExecutables to allow executables if they have a valid Authenticode signature.  Include scanMultipartFile to scan multi-part files such as split zip files.  Include ignoreRestrictFileTypesForAttachments to ignore restrictFileTypes setting for file attachments.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VirusScanAdvancedResult</returns>
        ApiResponse<VirusScanAdvancedResult> ScanFileAdvancedWithHttpInfo(System.IO.Stream inputFile, string fileName = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0);
        /// <summary>
        /// Scan a website for malicious content and threats
        /// </summary>
        /// <remarks>
        /// Operation includes scanning the content of the URL for various types of malicious content and threats, including viruses and threats (including Phishing).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebsiteScanResult</returns>
        WebsiteScanResult ScanWebsite(WebsiteScanRequest input, int operationIndex = 0);

        /// <summary>
        /// Scan a website for malicious content and threats
        /// </summary>
        /// <remarks>
        /// Operation includes scanning the content of the URL for various types of malicious content and threats, including viruses and threats (including Phishing).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebsiteScanResult</returns>
        ApiResponse<WebsiteScanResult> ScanWebsiteWithHttpInfo(WebsiteScanRequest input, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScanApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Scan a file for viruses
        /// </summary>
        /// <remarks>
        /// Scan files and content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VirusScanResult</returns>
        System.Threading.Tasks.Task<VirusScanResult> ScanFileAsync(System.IO.Stream inputFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Scan a file for viruses
        /// </summary>
        /// <remarks>
        /// Scan files and content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VirusScanResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<VirusScanResult>> ScanFileWithHttpInfoAsync(System.IO.Stream inputFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Advanced Scan a file for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash, MSG, and a wide range of image file formats.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileName">Optional: specify the original file name of the file being scanned.  By default the file name is taken from inputFile parameter, but if this is not provided, or you wish to override it, you can specify the original file name using this parameter. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, BAT scripts, JS scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros (including support for .DOCX, .XLSX, .PPTX, .DOC and .XLS), and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].  If set to true, HTML files containing script tags will be allowed, but ContainsScript will be set to true if script tags are present. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include permitJavascriptInHtml to allow JavaScript in HTML files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include blockInvalidUris to block invalid URIs in Office documents.  Include permitAuthenticodeSignedExecutables to allow executables if they have a valid Authenticode signature.  Include scanMultipartFile to scan multi-part files such as split zip files.  Include ignoreRestrictFileTypesForAttachments to ignore restrictFileTypes setting for file attachments.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VirusScanAdvancedResult</returns>
        System.Threading.Tasks.Task<VirusScanAdvancedResult> ScanFileAdvancedAsync(System.IO.Stream inputFile, string fileName = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Advanced Scan a file for viruses
        /// </summary>
        /// <remarks>
        /// Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash, MSG, and a wide range of image file formats.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileName">Optional: specify the original file name of the file being scanned.  By default the file name is taken from inputFile parameter, but if this is not provided, or you wish to override it, you can specify the original file name using this parameter. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, BAT scripts, JS scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros (including support for .DOCX, .XLSX, .PPTX, .DOC and .XLS), and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].  If set to true, HTML files containing script tags will be allowed, but ContainsScript will be set to true if script tags are present. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include permitJavascriptInHtml to allow JavaScript in HTML files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include blockInvalidUris to block invalid URIs in Office documents.  Include permitAuthenticodeSignedExecutables to allow executables if they have a valid Authenticode signature.  Include scanMultipartFile to scan multi-part files such as split zip files.  Include ignoreRestrictFileTypesForAttachments to ignore restrictFileTypes setting for file attachments.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VirusScanAdvancedResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<VirusScanAdvancedResult>> ScanFileAdvancedWithHttpInfoAsync(System.IO.Stream inputFile, string fileName = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Scan a website for malicious content and threats
        /// </summary>
        /// <remarks>
        /// Operation includes scanning the content of the URL for various types of malicious content and threats, including viruses and threats (including Phishing).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebsiteScanResult</returns>
        System.Threading.Tasks.Task<WebsiteScanResult> ScanWebsiteAsync(WebsiteScanRequest input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Scan a website for malicious content and threats
        /// </summary>
        /// <remarks>
        /// Operation includes scanning the content of the URL for various types of malicious content and threats, including viruses and threats (including Phishing).
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebsiteScanResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<WebsiteScanResult>> ScanWebsiteWithHttpInfoAsync(WebsiteScanRequest input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IScanApi : IScanApiSync, IScanApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ScanApi : IScanApi
    {
        private Cloudmersive.APIClient.NET.VirusScan.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScanApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ScanApi(string basePath)
        {
            this.Configuration = Cloudmersive.APIClient.NET.VirusScan.Client.Configuration.MergeConfigurations(
                Cloudmersive.APIClient.NET.VirusScan.Client.GlobalConfiguration.Instance,
                new Cloudmersive.APIClient.NET.VirusScan.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Cloudmersive.APIClient.NET.VirusScan.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloudmersive.APIClient.NET.VirusScan.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Cloudmersive.APIClient.NET.VirusScan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ScanApi(Cloudmersive.APIClient.NET.VirusScan.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Cloudmersive.APIClient.NET.VirusScan.Client.Configuration.MergeConfigurations(
                Cloudmersive.APIClient.NET.VirusScan.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Cloudmersive.APIClient.NET.VirusScan.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Cloudmersive.APIClient.NET.VirusScan.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Cloudmersive.APIClient.NET.VirusScan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ScanApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ScanApi(Cloudmersive.APIClient.NET.VirusScan.Client.ISynchronousClient client, Cloudmersive.APIClient.NET.VirusScan.Client.IAsynchronousClient asyncClient, Cloudmersive.APIClient.NET.VirusScan.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Cloudmersive.APIClient.NET.VirusScan.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Cloudmersive.APIClient.NET.VirusScan.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.VirusScan.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Scan a file for viruses Scan files and content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VirusScanResult</returns>
        public VirusScanResult ScanFile(System.IO.Stream inputFile, int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<VirusScanResult> localVarResponse = ScanFileWithHttpInfo(inputFile);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan a file for viruses Scan files and content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VirusScanResult</returns>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<VirusScanResult> ScanFileWithHttpInfo(System.IO.Stream inputFile, int operationIndex = 0)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'inputFile' when calling ScanApi->ScanFile");
            }

            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("inputFile", inputFile);

            localVarRequestOptions.Operation = "ScanApi.ScanFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<VirusScanResult>("/virus/scan/file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan a file for viruses Scan files and content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VirusScanResult</returns>
        public async System.Threading.Tasks.Task<VirusScanResult> ScanFileAsync(System.IO.Stream inputFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<VirusScanResult> localVarResponse = await ScanFileWithHttpInfoAsync(inputFile, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan a file for viruses Scan files and content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VirusScanResult)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<VirusScanResult>> ScanFileWithHttpInfoAsync(System.IO.Stream inputFile, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'inputFile' when calling ScanApi->ScanFile");
            }


            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("inputFile", inputFile);

            localVarRequestOptions.Operation = "ScanApi.ScanFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VirusScanResult>("/virus/scan/file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Advanced Scan a file for viruses Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash, MSG, and a wide range of image file formats.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileName">Optional: specify the original file name of the file being scanned.  By default the file name is taken from inputFile parameter, but if this is not provided, or you wish to override it, you can specify the original file name using this parameter. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, BAT scripts, JS scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros (including support for .DOCX, .XLSX, .PPTX, .DOC and .XLS), and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].  If set to true, HTML files containing script tags will be allowed, but ContainsScript will be set to true if script tags are present. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include permitJavascriptInHtml to allow JavaScript in HTML files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include blockInvalidUris to block invalid URIs in Office documents.  Include permitAuthenticodeSignedExecutables to allow executables if they have a valid Authenticode signature.  Include scanMultipartFile to scan multi-part files such as split zip files.  Include ignoreRestrictFileTypesForAttachments to ignore restrictFileTypes setting for file attachments.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VirusScanAdvancedResult</returns>
        public VirusScanAdvancedResult ScanFileAdvanced(System.IO.Stream inputFile, string fileName = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<VirusScanAdvancedResult> localVarResponse = ScanFileAdvancedWithHttpInfo(inputFile, fileName, allowExecutables, allowInvalidFiles, allowScripts, allowPasswordProtectedFiles, allowMacros, allowXmlExternalEntities, allowInsecureDeserialization, allowHtml, allowUnsafeArchives, allowOleEmbeddedObject, allowUnwantedAction, options, restrictFileTypes);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Scan a file for viruses Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash, MSG, and a wide range of image file formats.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileName">Optional: specify the original file name of the file being scanned.  By default the file name is taken from inputFile parameter, but if this is not provided, or you wish to override it, you can specify the original file name using this parameter. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, BAT scripts, JS scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros (including support for .DOCX, .XLSX, .PPTX, .DOC and .XLS), and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].  If set to true, HTML files containing script tags will be allowed, but ContainsScript will be set to true if script tags are present. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include permitJavascriptInHtml to allow JavaScript in HTML files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include blockInvalidUris to block invalid URIs in Office documents.  Include permitAuthenticodeSignedExecutables to allow executables if they have a valid Authenticode signature.  Include scanMultipartFile to scan multi-part files such as split zip files.  Include ignoreRestrictFileTypesForAttachments to ignore restrictFileTypes setting for file attachments.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VirusScanAdvancedResult</returns>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<VirusScanAdvancedResult> ScanFileAdvancedWithHttpInfo(System.IO.Stream inputFile, string fileName = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'inputFile' when calling ScanApi->ScanFileAdvanced");
            }

            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fileName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("fileName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(fileName)); // header parameter
            }
            if (allowExecutables != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowExecutables", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowExecutables)); // header parameter
            }
            if (allowInvalidFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInvalidFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInvalidFiles)); // header parameter
            }
            if (allowScripts != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowScripts", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowScripts)); // header parameter
            }
            if (allowPasswordProtectedFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowPasswordProtectedFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowPasswordProtectedFiles)); // header parameter
            }
            if (allowMacros != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowMacros", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowMacros)); // header parameter
            }
            if (allowXmlExternalEntities != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowXmlExternalEntities", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowXmlExternalEntities)); // header parameter
            }
            if (allowInsecureDeserialization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInsecureDeserialization", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInsecureDeserialization)); // header parameter
            }
            if (allowHtml != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowHtml", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowHtml)); // header parameter
            }
            if (allowUnsafeArchives != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnsafeArchives", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnsafeArchives)); // header parameter
            }
            if (allowOleEmbeddedObject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowOleEmbeddedObject", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowOleEmbeddedObject)); // header parameter
            }
            if (allowUnwantedAction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnwantedAction", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnwantedAction)); // header parameter
            }
            if (options != null)
            {
                localVarRequestOptions.HeaderParameters.Add("options", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(options)); // header parameter
            }
            if (restrictFileTypes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("restrictFileTypes", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(restrictFileTypes)); // header parameter
            }
            localVarRequestOptions.FileParameters.Add("inputFile", inputFile);

            localVarRequestOptions.Operation = "ScanApi.ScanFileAdvanced";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<VirusScanAdvancedResult>("/virus/scan/file/advanced", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanFileAdvanced", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Advanced Scan a file for viruses Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash, MSG, and a wide range of image file formats.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileName">Optional: specify the original file name of the file being scanned.  By default the file name is taken from inputFile parameter, but if this is not provided, or you wish to override it, you can specify the original file name using this parameter. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, BAT scripts, JS scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros (including support for .DOCX, .XLSX, .PPTX, .DOC and .XLS), and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].  If set to true, HTML files containing script tags will be allowed, but ContainsScript will be set to true if script tags are present. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include permitJavascriptInHtml to allow JavaScript in HTML files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include blockInvalidUris to block invalid URIs in Office documents.  Include permitAuthenticodeSignedExecutables to allow executables if they have a valid Authenticode signature.  Include scanMultipartFile to scan multi-part files such as split zip files.  Include ignoreRestrictFileTypesForAttachments to ignore restrictFileTypes setting for file attachments.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VirusScanAdvancedResult</returns>
        public async System.Threading.Tasks.Task<VirusScanAdvancedResult> ScanFileAdvancedAsync(System.IO.Stream inputFile, string fileName = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<VirusScanAdvancedResult> localVarResponse = await ScanFileAdvancedWithHttpInfoAsync(inputFile, fileName, allowExecutables, allowInvalidFiles, allowScripts, allowPasswordProtectedFiles, allowMacros, allowXmlExternalEntities, allowInsecureDeserialization, allowHtml, allowUnsafeArchives, allowOleEmbeddedObject, allowUnwantedAction, options, restrictFileTypes, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Advanced Scan a file for viruses Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash, MSG, and a wide range of image file formats.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inputFile">Input file to perform the operation on.</param>
        /// <param name="fileName">Optional: specify the original file name of the file being scanned.  By default the file name is taken from inputFile parameter, but if this is not provided, or you wish to override it, you can specify the original file name using this parameter. (optional)</param>
        /// <param name="allowExecutables">Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended). (optional)</param>
        /// <param name="allowInvalidFiles">Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended). (optional)</param>
        /// <param name="allowScripts">Set to false to block script files, such as a PHP files, Python scripts, BAT scripts, JS scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowPasswordProtectedFiles">Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowMacros">Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros (including support for .DOCX, .XLSX, .PPTX, .DOC and .XLS), and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowXmlExternalEntities">Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowInsecureDeserialization">Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended). (optional)</param>
        /// <param name="allowHtml">Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].  If set to true, HTML files containing script tags will be allowed, but ContainsScript will be set to true if script tags are present. (optional)</param>
        /// <param name="allowUnsafeArchives">Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed. (optional)</param>
        /// <param name="allowOleEmbeddedObject">Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed. (optional)</param>
        /// <param name="allowUnwantedAction">Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed. (optional)</param>
        /// <param name="options">Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include permitJavascriptInHtml to allow JavaScript in HTML files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include blockInvalidUris to block invalid URIs in Office documents.  Include permitAuthenticodeSignedExecutables to allow executables if they have a valid Authenticode signature.  Include scanMultipartFile to scan multi-part files such as split zip files.  Include ignoreRestrictFileTypesForAttachments to ignore restrictFileTypes setting for file attachments.  Default is no options. (optional)</param>
        /// <param name="restrictFileTypes">Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult&#x3D;false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VirusScanAdvancedResult)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<VirusScanAdvancedResult>> ScanFileAdvancedWithHttpInfoAsync(System.IO.Stream inputFile, string fileName = default(string), bool? allowExecutables = default(bool?), bool? allowInvalidFiles = default(bool?), bool? allowScripts = default(bool?), bool? allowPasswordProtectedFiles = default(bool?), bool? allowMacros = default(bool?), bool? allowXmlExternalEntities = default(bool?), bool? allowInsecureDeserialization = default(bool?), bool? allowHtml = default(bool?), bool? allowUnsafeArchives = default(bool?), bool? allowOleEmbeddedObject = default(bool?), bool? allowUnwantedAction = default(bool?), string options = default(string), string restrictFileTypes = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'inputFile' is set
            if (inputFile == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'inputFile' when calling ScanApi->ScanFileAdvanced");
            }


            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (fileName != null)
            {
                localVarRequestOptions.HeaderParameters.Add("fileName", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(fileName)); // header parameter
            }
            if (allowExecutables != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowExecutables", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowExecutables)); // header parameter
            }
            if (allowInvalidFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInvalidFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInvalidFiles)); // header parameter
            }
            if (allowScripts != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowScripts", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowScripts)); // header parameter
            }
            if (allowPasswordProtectedFiles != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowPasswordProtectedFiles", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowPasswordProtectedFiles)); // header parameter
            }
            if (allowMacros != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowMacros", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowMacros)); // header parameter
            }
            if (allowXmlExternalEntities != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowXmlExternalEntities", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowXmlExternalEntities)); // header parameter
            }
            if (allowInsecureDeserialization != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowInsecureDeserialization", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowInsecureDeserialization)); // header parameter
            }
            if (allowHtml != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowHtml", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowHtml)); // header parameter
            }
            if (allowUnsafeArchives != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnsafeArchives", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnsafeArchives)); // header parameter
            }
            if (allowOleEmbeddedObject != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowOleEmbeddedObject", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowOleEmbeddedObject)); // header parameter
            }
            if (allowUnwantedAction != null)
            {
                localVarRequestOptions.HeaderParameters.Add("allowUnwantedAction", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(allowUnwantedAction)); // header parameter
            }
            if (options != null)
            {
                localVarRequestOptions.HeaderParameters.Add("options", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(options)); // header parameter
            }
            if (restrictFileTypes != null)
            {
                localVarRequestOptions.HeaderParameters.Add("restrictFileTypes", Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.ParameterToString(restrictFileTypes)); // header parameter
            }
            localVarRequestOptions.FileParameters.Add("inputFile", inputFile);

            localVarRequestOptions.Operation = "ScanApi.ScanFileAdvanced";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VirusScanAdvancedResult>("/virus/scan/file/advanced", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanFileAdvanced", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan a website for malicious content and threats Operation includes scanning the content of the URL for various types of malicious content and threats, including viruses and threats (including Phishing).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>WebsiteScanResult</returns>
        public WebsiteScanResult ScanWebsite(WebsiteScanRequest input, int operationIndex = 0)
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<WebsiteScanResult> localVarResponse = ScanWebsiteWithHttpInfo(input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan a website for malicious content and threats Operation includes scanning the content of the URL for various types of malicious content and threats, including viruses and threats (including Phishing).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of WebsiteScanResult</returns>
        public Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<WebsiteScanResult> ScanWebsiteWithHttpInfo(WebsiteScanRequest input, int operationIndex = 0)
        {
            // verify the required parameter 'input' is set
            if (input == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'input' when calling ScanApi->ScanWebsite");
            }

            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = input;

            localVarRequestOptions.Operation = "ScanApi.ScanWebsite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<WebsiteScanResult>("/virus/scan/website", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanWebsite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan a website for malicious content and threats Operation includes scanning the content of the URL for various types of malicious content and threats, including viruses and threats (including Phishing).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WebsiteScanResult</returns>
        public async System.Threading.Tasks.Task<WebsiteScanResult> ScanWebsiteAsync(WebsiteScanRequest input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<WebsiteScanResult> localVarResponse = await ScanWebsiteWithHttpInfoAsync(input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan a website for malicious content and threats Operation includes scanning the content of the URL for various types of malicious content and threats, including viruses and threats (including Phishing).
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.VirusScan.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WebsiteScanResult)</returns>
        public async System.Threading.Tasks.Task<Cloudmersive.APIClient.NET.VirusScan.Client.ApiResponse<WebsiteScanResult>> ScanWebsiteWithHttpInfoAsync(WebsiteScanRequest input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'input' is set
            if (input == null)
            {
                throw new Cloudmersive.APIClient.NET.VirusScan.Client.ApiException(400, "Missing required parameter 'input' when calling ScanApi->ScanWebsite");
            }


            Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions localVarRequestOptions = new Cloudmersive.APIClient.NET.VirusScan.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml"
            };

            var localVarContentType = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Cloudmersive.APIClient.NET.VirusScan.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = input;

            localVarRequestOptions.Operation = "ScanApi.ScanWebsite";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Apikey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarRequestOptions.HeaderParameters.Add("Apikey", this.Configuration.GetApiKeyWithPrefix("Apikey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<WebsiteScanResult>("/virus/scan/website", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScanWebsite", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
