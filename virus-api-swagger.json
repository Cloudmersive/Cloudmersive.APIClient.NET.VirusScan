{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "virusapi",
    "description": "The Cloudmersive Virus Scan API lets you scan files and content for viruses and identify security issues with content."
  },
  "host": "api.cloudmersive.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/virus/scan/file": {
      "post": {
        "tags": [
          "Scan"
        ],
        "summary": "Scan a file for viruses",
        "description": "Scan files and content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.",
        "operationId": "Scan_File",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirusScanResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/virus/scan/file/advanced": {
      "post": {
        "tags": [
          "Scan"
        ],
        "summary": "Advanced Scan a file for viruses",
        "description": "Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash, MSG, and a wide range of image file formats.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.",
        "operationId": "Scan_FileAdvanced",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "inputFile",
            "in": "formData",
            "description": "Input file to perform the operation on.",
            "required": true,
            "type": "file"
          },
          {
            "name": "fileName",
            "in": "header",
            "description": "Optional: specify the original file name of the file being scanned.  By default the file name is taken from inputFile parameter, but if this is not provided, or you wish to override it, you can specify the original file name using this parameter.",
            "required": false,
            "type": "string"
          },
          {
            "name": "allowExecutables",
            "in": "header",
            "description": "Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowInvalidFiles",
            "in": "header",
            "description": "Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowScripts",
            "in": "header",
            "description": "Set to false to block script files, such as a PHP files, Python scripts, BAT scripts, JS scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowPasswordProtectedFiles",
            "in": "header",
            "description": "Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowMacros",
            "in": "header",
            "description": "Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros (including support for .DOCX, .XLSX, .PPTX, .DOC and .XLS), and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowXmlExternalEntities",
            "in": "header",
            "description": "Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowInsecureDeserialization",
            "in": "header",
            "description": "Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowHtml",
            "in": "header",
            "description": "Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].  If set to true, HTML files containing script tags will be allowed, but ContainsScript will be set to true if script tags are present.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowUnsafeArchives",
            "in": "header",
            "description": "Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowOleEmbeddedObject",
            "in": "header",
            "description": "Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowUnwantedAction",
            "in": "header",
            "description": "Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "options",
            "in": "header",
            "description": "Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include permitJavascriptInHtml to allow JavaScript in HTML files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include blockInvalidUris to block invalid URIs in Office documents.  Include permitAuthenticodeSignedExecutables to allow executables if they have a valid Authenticode signature.  Include scanMultipartFile to scan multi-part files such as split zip files.  Include ignoreRestrictFileTypesForAttachments to ignore restrictFileTypes setting for file attachments.  Default is no options.",
            "required": false,
            "type": "string"
          },
          {
            "name": "restrictFileTypes",
            "in": "header",
            "description": "Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult=false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VirusScanAdvancedResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/virus/scan/website": {
      "post": {
        "tags": [
          "Scan"
        ],
        "summary": "Scan a website for malicious content and threats",
        "description": "Operation includes scanning the content of the URL for various types of malicious content and threats, including viruses and threats (including Phishing).",
        "operationId": "Scan_Website",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "input",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebsiteScanRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/WebsiteScanResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/virus/scan/cloud-storage/azure-blob/single": {
      "post": {
        "tags": [
          "ScanCloudStorage"
        ],
        "summary": "Scan an Azure Blob for viruses",
        "description": "Scan the contents of a single Azure Blob and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.",
        "operationId": "ScanCloudStorage_ScanAzureBlob",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "connectionString",
            "in": "header",
            "description": "Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.",
            "required": true,
            "type": "string"
          },
          {
            "name": "containerName",
            "in": "header",
            "description": "Name of the Blob container within the Azure Blob Storage account",
            "required": true,
            "type": "string"
          },
          {
            "name": "blobPath",
            "in": "header",
            "description": "Path to the blob within the container, such as 'hello.pdf' or '/folder/subfolder/world.pdf'.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with 'base64:', such as: 'base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV'.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CloudStorageVirusScanResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/virus/scan/cloud-storage/azure-blob/single/advanced": {
      "post": {
        "tags": [
          "ScanCloudStorage"
        ],
        "summary": "Advanced Scan an Azure Blob for viruses",
        "description": "Advanced Scan the contents of a single Azure Blob and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.",
        "operationId": "ScanCloudStorage_ScanAzureBlobAdvanced",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "connectionString",
            "in": "header",
            "description": "Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.",
            "required": true,
            "type": "string"
          },
          {
            "name": "containerName",
            "in": "header",
            "description": "Name of the Blob container within the Azure Blob Storage account",
            "required": true,
            "type": "string"
          },
          {
            "name": "blobPath",
            "in": "header",
            "description": "Path to the blob within the container, such as 'hello.pdf' or '/folder/subfolder/world.pdf'.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with 'base64:', such as: 'base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV'.",
            "required": true,
            "type": "string"
          },
          {
            "name": "allowExecutables",
            "in": "header",
            "description": "Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowInvalidFiles",
            "in": "header",
            "description": "Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowScripts",
            "in": "header",
            "description": "Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowPasswordProtectedFiles",
            "in": "header",
            "description": "Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowMacros",
            "in": "header",
            "description": "Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowXmlExternalEntities",
            "in": "header",
            "description": "Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowInsecureDeserialization",
            "in": "header",
            "description": "Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowHtml",
            "in": "header",
            "description": "Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowUnsafeArchives",
            "in": "header",
            "description": "Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowOleEmbeddedObject",
            "in": "header",
            "description": "Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowUnwantedAction",
            "in": "header",
            "description": "Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "options",
            "in": "header",
            "description": "Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options.",
            "required": false,
            "type": "string"
          },
          {
            "name": "restrictFileTypes",
            "in": "header",
            "description": "Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult=false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CloudStorageAdvancedVirusScanResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/virus/scan/cloud-storage/azure-blob/single/advanced/batch-job": {
      "post": {
        "tags": [
          "ScanCloudStorage"
        ],
        "summary": "Advanced Scan an Azure Blob for viruses via a batch job",
        "description": "Via a batch job, advanced Scan the contents of a single Azure Blob and its content for viruses and threats, great for larger/longer processing jobs.  Requires Managed Instance or Private Cloud.  Returns a job ID which you can then use the Get Job Status API to get the status and output of the job.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.",
        "operationId": "ScanCloudStorage_ScanAzureBlobAdvancedBatchJob",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "connectionString",
            "in": "header",
            "description": "Connection string for the Azure Blob Storage Account; you can get this connection string from the Access Keys tab of the Storage Account blade in the Azure Portal.",
            "required": true,
            "type": "string"
          },
          {
            "name": "containerName",
            "in": "header",
            "description": "Name of the Blob container within the Azure Blob Storage account",
            "required": true,
            "type": "string"
          },
          {
            "name": "blobPath",
            "in": "header",
            "description": "Path to the blob within the container, such as 'hello.pdf' or '/folder/subfolder/world.pdf'.  If the blob path contains Unicode characters, you must base64 encode the blob path and prepend it with 'base64:', such as: 'base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV'.",
            "required": true,
            "type": "string"
          },
          {
            "name": "allowExecutables",
            "in": "header",
            "description": "Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowInvalidFiles",
            "in": "header",
            "description": "Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowScripts",
            "in": "header",
            "description": "Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowPasswordProtectedFiles",
            "in": "header",
            "description": "Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowMacros",
            "in": "header",
            "description": "Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowXmlExternalEntities",
            "in": "header",
            "description": "Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowInsecureDeserialization",
            "in": "header",
            "description": "Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowHtml",
            "in": "header",
            "description": "Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowUnsafeArchives",
            "in": "header",
            "description": "Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowOleEmbeddedObject",
            "in": "header",
            "description": "Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowUnwantedAction",
            "in": "header",
            "description": "Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "options",
            "in": "header",
            "description": "Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Include scanMultipartFile to scan multi-part files such as split zip files.  Default is no options.",
            "required": false,
            "type": "string"
          },
          {
            "name": "restrictFileTypes",
            "in": "header",
            "description": "Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult=false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScanCloudStorageBatchJobCreateResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/virus/scan/cloud-storage/aws-s3/single": {
      "post": {
        "tags": [
          "ScanCloudStorage"
        ],
        "summary": "Scan an AWS S3 file for viruses",
        "description": "Scan the contents of a single AWS S3 file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.",
        "operationId": "ScanCloudStorage_ScanAwsS3File",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accessKey",
            "in": "header",
            "description": "AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "header",
            "description": "AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console",
            "required": true,
            "type": "string"
          },
          {
            "name": "bucketRegion",
            "in": "header",
            "description": "Name of the region of the S3 bucket, such as 'US-East-1'",
            "required": true,
            "type": "string"
          },
          {
            "name": "bucketName",
            "in": "header",
            "description": "Name of the S3 bucket",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyName",
            "in": "header",
            "description": "Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with 'base64:', such as: 'base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV'.",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleArn",
            "in": "header",
            "description": "Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with 'base64:', such as: 'base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV'.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CloudStorageVirusScanResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/virus/scan/cloud-storage/aws-s3/single/advanced": {
      "post": {
        "tags": [
          "ScanCloudStorage"
        ],
        "summary": "Advanced Scan an AWS S3 file for viruses",
        "description": "Advanced Scan the contents of a single AWS S3 file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.",
        "operationId": "ScanCloudStorage_ScanAwsS3FileAdvanced",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "accessKey",
            "in": "header",
            "description": "AWS S3 access key for the S3 bucket; you can get this from My Security Credentials in the AWS console",
            "required": true,
            "type": "string"
          },
          {
            "name": "secretKey",
            "in": "header",
            "description": "AWS S3 secret key for the S3 bucket; you can get this from My Security Credentials in the AWS console",
            "required": true,
            "type": "string"
          },
          {
            "name": "bucketRegion",
            "in": "header",
            "description": "Name of the region of the S3 bucket, such as 'US-East-1'",
            "required": true,
            "type": "string"
          },
          {
            "name": "bucketName",
            "in": "header",
            "description": "Name of the S3 bucket",
            "required": true,
            "type": "string"
          },
          {
            "name": "keyName",
            "in": "header",
            "description": "Key name (also called file name) of the file in S3 that you wish to scan for viruses.  If the key name contains Unicode characters, you must base64 encode the key name and prepend it with 'base64:', such as: 'base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV'.",
            "required": true,
            "type": "string"
          },
          {
            "name": "roleArn",
            "in": "header",
            "description": "Optional: Role ARN for STS Credential-based access.  This is for advanced access using the Security Token Service and is not required.  If the roleArn contains Unicode characters, you must base64 encode the key name and prepend it with 'base64:', such as: 'base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV'.",
            "required": false,
            "type": "string"
          },
          {
            "name": "allowExecutables",
            "in": "header",
            "description": "Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowInvalidFiles",
            "in": "header",
            "description": "Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowScripts",
            "in": "header",
            "description": "Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowPasswordProtectedFiles",
            "in": "header",
            "description": "Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowMacros",
            "in": "header",
            "description": "Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowXmlExternalEntities",
            "in": "header",
            "description": "Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowInsecureDeserialization",
            "in": "header",
            "description": "Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowHtml",
            "in": "header",
            "description": "Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowUnsafeArchives",
            "in": "header",
            "description": "Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowOleEmbeddedObject",
            "in": "header",
            "description": "Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowUnwantedAction",
            "in": "header",
            "description": "Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "options",
            "in": "header",
            "description": "Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options.",
            "required": false,
            "type": "string"
          },
          {
            "name": "restrictFileTypes",
            "in": "header",
            "description": "Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult=false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CloudStorageAdvancedVirusScanResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/virus/scan/cloud-storage/sharepoint-online/site/single": {
      "post": {
        "tags": [
          "ScanCloudStorage"
        ],
        "summary": "Virus Scan a file in a SharePoint Online Site Drive",
        "description": "Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.",
        "operationId": "ScanCloudStorage_ScanSharePointOnlineFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "clientID",
            "in": "header",
            "description": "Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientSecret",
            "in": "header",
            "description": "Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal",
            "required": true,
            "type": "string"
          },
          {
            "name": "sharepointDomainName",
            "in": "header",
            "description": "SharePoint Online domain name, such as mydomain.sharepoint.com",
            "required": true,
            "type": "string"
          },
          {
            "name": "siteID",
            "in": "header",
            "description": "Site ID (GUID) of the SharePoint site you wish to retrieve the file from",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantID",
            "in": "header",
            "description": "Optional; Tenant ID of your Azure Active Directory",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "header",
            "description": "Path to the file within the drive, such as 'hello.pdf' or '/folder/subfolder/world.pdf'.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with 'base64:', such as: 'base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV'.",
            "required": true,
            "type": "string"
          },
          {
            "name": "itemID",
            "in": "header",
            "description": "SharePoint itemID, such as a DriveItem Id",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CloudStorageVirusScanResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/virus/scan/cloud-storage/sharepoint-online/site/advanced": {
      "post": {
        "tags": [
          "ScanCloudStorage"
        ],
        "summary": "Advanced Virus Scan a file in a SharePoint Online Site Drive",
        "description": "Advanced Virus Scan the contents of a single SharePoint Online Site Drive file and its content for viruses and threats.  Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time. To get the Client ID and Client Secret, follow these steps: (1) Navigate to the Azure Portal and click on Azure Active Directory, (2) click on App Registrations on the left hand side, (3) click on Register Application, (4) Name the application CloudmersiveAntiVirus and click on Register, (5) Get the client ID by clicking on Overview and copying the value labeled Application (client) ID, (6) click on Certificates and Secrets, (7) click on New client secret, choose a longer expiration and give the secret a name, (8) copy the secret value to the clipboard and save it securely, this is your Client Secret, (9) Now we need to grant permissions to SharePOint; click on API Permissions on the left hand side, (10) click on Add a permission and choose Microsoft Graph, (11) click on Application Permissions, (12) search for Sites.FullControl.All, (13) Click on Add Permissions, (14) now navigate back to Azure Active Directory and click on Enterprise Applications, click on CloudmersiveAntiVirus and click on Permissions, and (15) click on Grant Admin Consent.",
        "operationId": "ScanCloudStorage_ScanSharePointOnlineFileAdvanced",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "clientID",
            "in": "header",
            "description": "Client ID access credentials; see description above for instructions on how to get the Client ID from the Azure Active Directory portal.",
            "required": true,
            "type": "string"
          },
          {
            "name": "clientSecret",
            "in": "header",
            "description": "Client Secret access credentials; see description above for instructions on how to get the Client Secret from the Azure Active Directory portal",
            "required": true,
            "type": "string"
          },
          {
            "name": "sharepointDomainName",
            "in": "header",
            "description": "SharePoint Online domain name, such as mydomain.sharepoint.com",
            "required": true,
            "type": "string"
          },
          {
            "name": "siteID",
            "in": "header",
            "description": "Site ID (GUID) of the SharePoint site you wish to retrieve the file from",
            "required": true,
            "type": "string"
          },
          {
            "name": "tenantID",
            "in": "header",
            "description": "Optional; Tenant ID of your Azure Active Directory",
            "required": false,
            "type": "string"
          },
          {
            "name": "filePath",
            "in": "header",
            "description": "Path to the file within the drive, such as 'hello.pdf' or '/folder/subfolder/world.pdf'.  If the file path contains Unicode characters, you must base64 encode the file path and prepend it with 'base64:', such as: 'base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV'.",
            "required": false,
            "type": "string"
          },
          {
            "name": "itemID",
            "in": "header",
            "description": "SharePoint itemID, such as a DriveItem Id",
            "required": false,
            "type": "string"
          },
          {
            "name": "allowExecutables",
            "in": "header",
            "description": "Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowInvalidFiles",
            "in": "header",
            "description": "Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowScripts",
            "in": "header",
            "description": "Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowPasswordProtectedFiles",
            "in": "header",
            "description": "Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowMacros",
            "in": "header",
            "description": "Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowXmlExternalEntities",
            "in": "header",
            "description": "Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowInsecureDeserialization",
            "in": "header",
            "description": "Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowHtml",
            "in": "header",
            "description": "Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowUnsafeArchives",
            "in": "header",
            "description": "Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowOleEmbeddedObject",
            "in": "header",
            "description": "Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowUnwantedAction",
            "in": "header",
            "description": "Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "restrictFileTypes",
            "in": "header",
            "description": "Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult=false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CloudStorageAdvancedVirusScanResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/virus/scan/cloud-storage/gcp-storage/single": {
      "post": {
        "tags": [
          "ScanCloudStorage"
        ],
        "summary": "Scan an Google Cloud Platform (GCP) Storage file for viruses",
        "description": "Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.",
        "operationId": "ScanCloudStorage_ScanGcpStorageFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "bucketName",
            "in": "header",
            "description": "Name of the bucket in Google Cloud Storage",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectName",
            "in": "header",
            "description": "Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with 'base64:', such as: 'base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV'.",
            "required": true,
            "type": "string"
          },
          {
            "name": "jsonCredentialFile",
            "in": "formData",
            "description": "Service Account credential for Google Cloud stored in a JSON file.",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CloudStorageVirusScanResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/virus/scan/cloud-storage/gcp-storage/single/advanced": {
      "post": {
        "tags": [
          "ScanCloudStorage"
        ],
        "summary": "Advanced Scan an Google Cloud Platform (GCP) Storage file for viruses",
        "description": "Advanced Scan the contents of a single Google Cloud Platform (GCP) Storage file and its content for viruses and threats. Advanced Scan files with 360-degree Content Protection across Viruses and Malware, executables, invalid files, scripts, and even restrictions on accepted file types with complete content verification. Customize threat rules to your needs. Leverage continuously updated signatures for millions of threats, and advanced high-performance scanning capabilities.  Over 17 million virus and malware signatures.  Continuous cloud-based updates.  Block threats beyond viruses including executables, scripts, invalid files, and more.  Optionally limit input files to a specific set of file types (e.g. PDF and Word Documents only).  Wide file format support including Office, PDF, HTML, Flash.  Zip support including .Zip, .Rar, .DMG, .Tar, and other archive formats.  Multi-threat scanning across viruses, malware, trojans, ransomware, and spyware.  High-speed in-memory scanning delivers subsecond typical response time.",
        "operationId": "ScanCloudStorage_ScanGcpStorageFileAdvanced",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "bucketName",
            "in": "header",
            "description": "Name of the bucket in Google Cloud Storage",
            "required": true,
            "type": "string"
          },
          {
            "name": "objectName",
            "in": "header",
            "description": "Name of the object or file in Google Cloud Storage.  If the object name contains Unicode characters, you must base64 encode the object name and prepend it with 'base64:', such as: 'base64:6ZWV6ZWV6ZWV6ZWV6ZWV6ZWV'.",
            "required": true,
            "type": "string"
          },
          {
            "name": "jsonCredentialFile",
            "in": "formData",
            "description": "Service Account credential for Google Cloud stored in a JSON file.",
            "required": true,
            "type": "file"
          },
          {
            "name": "allowExecutables",
            "in": "header",
            "description": "Set to false to block executable files (program code) from being allowed in the input file.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowInvalidFiles",
            "in": "header",
            "description": "Set to false to block invalid files, such as a PDF file that is not really a valid PDF file, or a Word Document that is not a valid Word Document.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowScripts",
            "in": "header",
            "description": "Set to false to block script files, such as a PHP files, Python scripts, and other malicious content or security threats that can be embedded in the file.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowPasswordProtectedFiles",
            "in": "header",
            "description": "Set to false to block password protected and encrypted files, such as encrypted zip and rar files, and other files that seek to circumvent scanning through passwords.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowMacros",
            "in": "header",
            "description": "Set to false to block macros and other threats embedded in document files, such as Word, Excel and PowerPoint embedded Macros, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowXmlExternalEntities",
            "in": "header",
            "description": "Set to false to block XML External Entities and other threats embedded in XML files, and other files that contain embedded content threats. Set to true to allow these file types. Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowInsecureDeserialization",
            "in": "header",
            "description": "Set to false to block Insecure Deserialization and other threats embedded in JSON and other object serialization files, and other files that contain embedded content threats.  Set to true to allow these file types.  Default is false (recommended).",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowHtml",
            "in": "header",
            "description": "Set to false to block HTML input in the top level file; HTML can contain XSS, scripts, local file accesses and other threats.  Set to true to allow these file types.  Default is false (recommended) [for API keys created prior to the release of this feature default is true for backward compatability].",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowUnsafeArchives",
            "in": "header",
            "description": "Set to false to block unsafe archives such as Zip Bombs, and other archives that can cause unsafe extraction outcomes.  Default is false (recommended).  If set to true, unsafe archives will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowOleEmbeddedObject",
            "in": "header",
            "description": "Set to false to block OLE embedded objects, which can contain vulnerabilities and executable code.  Default is false (recommended).  If set to true, OLE embedded objects will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allowUnwantedAction",
            "in": "header",
            "description": "Set to false to block unwanted or undesired actions, which can contain execute or open links or content when the file is viewed.  Default is false (recommended).  If set to true, unwanted actions will be allowed.",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "options",
            "in": "header",
            "description": "Comma separated set of configuration operations.  Include permitJavascriptAndHtmlInPDFs to allow JavaScript and HTML in PDF files.  Include blockOfficeXmlOleEmbeddedFile to block embedded OLE files in Office Documents using the modern file format.  Default is no options.",
            "required": false,
            "type": "string"
          },
          {
            "name": "restrictFileTypes",
            "in": "header",
            "description": "Specify a restricted set of file formats to allow as clean as a comma-separated list of file formats, such as .pdf,.docx,.png would allow only PDF, PNG and Word document files.  All files must pass content verification against this list of file formats, if they do not, then the result will be returned as CleanResult=false.  Set restrictFileTypes parameter to null or empty string to disable; default is disabled.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CloudStorageAdvancedVirusScanResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    },
    "/virus/scan/cloud-storage/batch-job/status": {
      "get": {
        "tags": [
          "ScanCloudStorage"
        ],
        "summary": "Get the status and result of a Scan Cloud Storage Batch Job",
        "description": "Returns the result of the Async Job - possible states can be STARTED or COMPLETED.  This API is only available for Cloudmersive Managed Instance and Private Cloud deployments.",
        "operationId": "ScanCloudStorage_GetAsyncJobStatus",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "AsyncJobID",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScanCloudStorageJobStatusResult"
            }
          }
        },
        "security": [
          {
            "Apikey": []
          }
        ]
      }
    }
  },
  "definitions": {
    "VirusScanResult": {
      "description": "Result of running a virus scan",
      "type": "object",
      "properties": {
        "CleanResult": {
          "description": "True if the scan contained no viruses, false otherwise",
          "type": "boolean"
        },
        "FoundViruses": {
          "description": "Array of viruses found, if any",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirusFound"
          }
        }
      }
    },
    "VirusFound": {
      "description": "Virus positively identified",
      "type": "object",
      "properties": {
        "FileName": {
          "description": "Name of the file containing the virus",
          "type": "string"
        },
        "VirusName": {
          "description": "Name of the virus that was found",
          "type": "string"
        }
      }
    },
    "VirusScanAdvancedResult": {
      "description": "Result of running an advanced virus scan",
      "type": "object",
      "properties": {
        "CleanResult": {
          "description": "True if the scan contained no viruses, false otherwise",
          "type": "boolean"
        },
        "ContainsExecutable": {
          "description": "True if the scan contained an executable (application code), which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsInvalidFile": {
          "description": "True if the scan contained an invalid file (such as a PDF that is not a valid PDF, Word Document that is not a valid Word Document, etc.), which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsScript": {
          "description": "True if the scan contained a script (such as a PHP script, Python script, etc.) which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsPasswordProtectedFile": {
          "description": "True if the scan contained a password protected or encrypted file, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsRestrictedFileFormat": {
          "description": "True if the uploaded file is of a type that is not allowed based on the optional restrictFileTypes parameter, false otherwise; if restrictFileTypes is not set, this will always be false",
          "type": "boolean"
        },
        "ContainsMacros": {
          "description": "True if the uploaded file contains embedded Macros of other embedded threats within the document, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsXmlExternalEntities": {
          "description": "True if the uploaded file contains embedded XML External Entity threats of other embedded threats within the document, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsInsecureDeserialization": {
          "description": "True if the uploaded file contains embedded Insecure Deserialization threats of other embedded threats within the document, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsHtml": {
          "description": "True if the uploaded file contains HTML, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsUnsafeArchive": {
          "description": "True if the uploaded file contains unsafe archive (e.g. zip) content, such as a Zip Bomb, or other configurations of a zip file that could lead to an unsafe extraction",
          "type": "boolean"
        },
        "ContainsOleEmbeddedObject": {
          "description": "True if the uploaded file contains an OLE embedded object, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsUnwantedAction": {
          "description": "True if the uploaded file contains an unwanted automatic action, which can be a significant risk factor",
          "type": "boolean"
        },
        "VerifiedFileFormat": {
          "description": "For file format verification-supported file formats, the contents-verified file format of the file.  Null indicates that the file format is not supported for contents verification.  If a Virus or Malware is found, this field will always be set to Null.",
          "type": "string"
        },
        "FoundViruses": {
          "description": "Array of viruses found, if any",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirusFound"
          }
        },
        "ContentInformation": {
          "$ref": "#/definitions/AdditionalAdvancedScanInformation",
          "description": "Contains additional non-threat content verification information"
        }
      }
    },
    "AdditionalAdvancedScanInformation": {
      "description": "Additional non-threat content verification information",
      "type": "object",
      "properties": {
        "ContainsJSON": {
          "description": "True if the input file contains JSON data, false otherwise; this is not a threat signal",
          "type": "boolean"
        },
        "ContainsXML": {
          "description": "True if the input file contains XML data, false otherwise; this is not a threat signal",
          "type": "boolean"
        },
        "ContainsImage": {
          "description": "True if the input file contains an image",
          "type": "boolean"
        },
        "Hash_SHA1": {
          "description": "SHA1 hash of input file",
          "type": "string"
        },
        "RelevantSubfileName": {
          "description": "Relevant subfile name in an archive format for identified threats, if any",
          "type": "string"
        },
        "RelevantSubfileHash_SHA1": {
          "description": "SHA1 hash of relevant subfile name in an archive format for identified threats, if any",
          "type": "string"
        },
        "IsAuthenticodeSigned": {
          "description": "True if there is a valid Authenticode signature, False otherwise",
          "type": "boolean"
        }
      }
    },
    "WebsiteScanRequest": {
      "description": "Request to scan a website for malicious content",
      "type": "object",
      "properties": {
        "Url": {
          "description": "URL of the website to scan; should begin with http:// or https://",
          "type": "string"
        }
      }
    },
    "WebsiteScanResult": {
      "description": "Result of running a website scan",
      "type": "object",
      "properties": {
        "CleanResult": {
          "description": "True if the scan contained no threats, false otherwise",
          "type": "boolean"
        },
        "WebsiteThreatType": {
          "description": "Type of threat returned; can be None, Malware, ForcedDownload or Phishing",
          "enum": [
            "None",
            "Malware",
            "Phishing",
            "ForcedDownload",
            "UnableToConnect"
          ],
          "type": "string"
        },
        "FoundViruses": {
          "description": "Array of viruses found, if any",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirusFound"
          }
        },
        "WebsiteHttpResponseCode": {
          "format": "int32",
          "description": "The remote server URL HTTP reasponse code; useful for debugging issues with scanning; typically if the remote server returns a 200 or 300-series code this means a successful response, while a 400 or 500 series code would represent an error returned from the remote server for the provided URL.",
          "type": "integer"
        }
      }
    },
    "CloudStorageVirusScanResult": {
      "description": "Result of running a virus scan on cloud storage",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation of retrieving the file, and scanning it were successfully completed, false if the file could not be downloaded from cloud storage, or if the file could not be scanned.  Note that successful completion does not mean the file is clean; for the output of the virus scanning operation itself, use the CleanResult and FoundViruses parameters.",
          "type": "boolean"
        },
        "CleanResult": {
          "description": "True if the scan contained no viruses, false otherwise",
          "type": "boolean"
        },
        "FoundViruses": {
          "description": "Array of viruses found, if any",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudStorageVirusFound"
          }
        },
        "ErrorDetailedDescription": {
          "description": "Detailed error message if the operation was not successful",
          "type": "string"
        },
        "FileSize": {
          "format": "int64",
          "description": "Size in bytes of the file that was retrieved and scanned",
          "type": "integer"
        },
        "ContainsContentModerationRejection": {
          "description": "Set to true when using NSFW Content Moderation in the Cloudmersive Storage Protect product (disabled by default)",
          "type": "boolean"
        },
        "ContainsExecutable": {
          "description": "True if the scan contained an executable (application code), which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsInvalidFile": {
          "description": "True if the scan contained an invalid file (such as a PDF that is not a valid PDF, Word Document that is not a valid Word Document, etc.), which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsScript": {
          "description": "True if the scan contained a script (such as a PHP script, Python script, etc.) which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsPasswordProtectedFile": {
          "description": "True if the scan contained a password protected or encrypted file, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsRestrictedFileFormat": {
          "description": "True if the uploaded file is of a type that is not allowed based on the optional restrictFileTypes parameter, false otherwise; if restrictFileTypes is not set, this will always be false",
          "type": "boolean"
        },
        "ContainsMacros": {
          "description": "True if the uploaded file contains embedded Macros of other embedded threats within the document, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsXmlExternalEntities": {
          "description": "True if the uploaded file contains embedded XML External Entity threats of other embedded threats within the document, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsInsecureDeserialization": {
          "description": "True if the uploaded file contains embedded Insecure Deserialization threats of other embedded threats within the document, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsHtml": {
          "description": "True if the uploaded file contains HTML, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsUnsafeArchive": {
          "description": "True if the uploaded file contains unsafe archive (e.g. zip) content, such as a Zip Bomb, or other configurations of a zip file that could lead to an unsafe extraction",
          "type": "boolean"
        },
        "ContainsOleEmbeddedObject": {
          "description": "True if the uploaded file contains an OLE embedded object, which can be a significant risk factor",
          "type": "boolean"
        },
        "VerifiedFileFormat": {
          "description": "For file format verification-supported file formats, the contents-verified file format of the file.  Null indicates that the file format is not supported for contents verification.  If a Virus or Malware is found, this field will always be set to Null.",
          "type": "string"
        }
      }
    },
    "CloudStorageVirusFound": {
      "description": "Virus positively identified",
      "type": "object",
      "properties": {
        "FileName": {
          "description": "Name of the file containing the virus",
          "type": "string"
        },
        "VirusName": {
          "description": "Name of the virus that was found",
          "type": "string"
        }
      }
    },
    "CloudStorageAdvancedVirusScanResult": {
      "description": "Result of running an advanced virus scan on cloud storage",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if the operation of retrieving the file, and scanning it were successfully completed, false if the file could not be downloaded from cloud storage, or if the file could not be scanned.  Note that successful completion does not mean the file is clean; for the output of the virus scanning operation itself, use the CleanResult and FoundViruses parameters.",
          "type": "boolean"
        },
        "CleanResult": {
          "description": "True if the scan contained no viruses, false otherwise",
          "type": "boolean"
        },
        "ContainsExecutable": {
          "description": "True if the scan contained an executable (application code), which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsInvalidFile": {
          "description": "True if the scan contained an invalid file (such as a PDF that is not a valid PDF, Word Document that is not a valid Word Document, etc.), which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsScript": {
          "description": "True if the scan contained a script (such as a PHP script, Python script, etc.) which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsPasswordProtectedFile": {
          "description": "True if the scan contained a password protected or encrypted file, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsRestrictedFileFormat": {
          "description": "True if the uploaded file is of a type that is not allowed based on the optional restrictFileTypes parameter, false otherwise; if restrictFileTypes is not set, this will always be false",
          "type": "boolean"
        },
        "ContainsMacros": {
          "description": "True if the uploaded file contains embedded Macros of other embedded threats within the document, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsXmlExternalEntities": {
          "description": "True if the uploaded file contains embedded XML External Entity threats of other embedded threats within the document, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsInsecureDeserialization": {
          "description": "True if the uploaded file contains embedded Insecure Deserialization threats of other embedded threats within the document, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsHtml": {
          "description": "True if the uploaded file contains HTML, which can be a significant risk factor",
          "type": "boolean"
        },
        "ContainsUnsafeArchive": {
          "description": "True if the uploaded file contains unsafe archive (e.g. zip) content, such as a Zip Bomb, or other configurations of a zip file that could lead to an unsafe extraction",
          "type": "boolean"
        },
        "ContainsOleEmbeddedObject": {
          "description": "True if the uploaded file contains an OLE embedded object, which can be a significant risk factor",
          "type": "boolean"
        },
        "VerifiedFileFormat": {
          "description": "For file format verification-supported file formats, the contents-verified file format of the file.  Null indicates that the file format is not supported for contents verification.  If a Virus or Malware is found, this field will always be set to Null.",
          "type": "string"
        },
        "FoundViruses": {
          "description": "Array of viruses found, if any",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudStorageVirusFound"
          }
        },
        "ErrorDetailedDescription": {
          "description": "Detailed error message if the operation was not successful",
          "type": "string"
        },
        "FileSize": {
          "format": "int64",
          "description": "Size in bytes of the file that was retrieved and scanned",
          "type": "integer"
        },
        "ContentInformation": {
          "$ref": "#/definitions/AdditionalAdvancedScanInformation",
          "description": "Contains additional non-threat content verification information"
        }
      }
    },
    "ScanCloudStorageBatchJobCreateResult": {
      "description": "Result of performing a convert documentbatch job operation",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "True if successful, false otherwise",
          "type": "boolean"
        },
        "AsyncJobID": {
          "description": "When creating a job, an Async Job ID is returned.  Use the GetAsyncJobStatus API to check on the status of this job using the AsyncJobID and get the result when it finishes",
          "type": "string"
        }
      }
    },
    "ScanCloudStorageJobStatusResult": {
      "description": "Status of the scan cloud storage job",
      "type": "object",
      "properties": {
        "Successful": {
          "description": "Tru eif the operation to check the status of the job was successful, false otherwise",
          "type": "boolean"
        },
        "AsyncJobStatus": {
          "description": "Returns the job status of the Async Job, if applicable.  Possible states are STARTED and COMPLETED",
          "type": "string"
        },
        "AsyncJobID": {
          "description": "Job ID of the async batch job",
          "type": "string"
        },
        "Result": {
          "$ref": "#/definitions/CloudStorageAdvancedVirusScanResult",
          "description": "Output scan result, if applicable"
        },
        "JobDuration": {
          "description": "Duration of a completed job",
          "type": "string"
        },
        "ErrorMessage": {
          "description": "Error message (if any)",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Apikey": {
      "type": "apiKey",
      "description": "API Key Authentication",
      "name": "Apikey",
      "in": "header"
    }
  }
}
